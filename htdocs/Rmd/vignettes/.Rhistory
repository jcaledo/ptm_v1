knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(ptm)
load("/Users/juancarlosaledo/ptm_outdropbox/ptm/htdocs/Rmd/vignettes/pprot.Rda")
library(tidyr)
df <- pprot[, 1:3]
## ------- Filtramos las filas que contienen -999
df$target <- df$reg
df <- tidyr::unnest(df, target)
## ------- Filtramos las filas que contienen -999
df <- dplyr::filter(df, target != -999)
## ------- Filtramos las lineas en que
df$check <- TRUE
for (i in 1:nrow(df)){
d <- setdiff(df$pos[[i]], df$reg[[i]])
if (length(df$reg[[i]]) > length(d)){
df$check[i] <- FALSE
}
}
df <- df[which(df$check == TRUE), -ncol(df)]
## --- Randomly choosing a control serine position
set.seed(123)
df$ctr <- NA
for (i in 1:nrow(df)){
print(i)
id <- df$id[i]
set_to_be_sampled <- setdiff(df$pos[[i]], df$reg[[i]])
sample_size <- length(df$reg[[i]])
my_sample <- sample(set_to_be_sampled, sample_size, replace=FALSE)
for (j in 0:(sample_size-1)){
df$ctr[i + j] <- my_sample[j + 1]
}
i <- i + j + 1
}
View(df)
i=1
id <- df$id[i]
id
set_to_be_sampled <- setdiff(df$pos[[i]], df$reg[[i]])
set_to_be_sampled
length(df$reg[[i]])
my_sample <- sample(set_to_be_sampled, sample_size, replace=FALSE)
my_sample
sample_size
from(j in 0:0){print(j)}
from(j in 0:0){print(j)}
from(j in 0:2){print(j)}
from(j in 1:2){print(j)}
for (j in 0:2){print(j)}
for (j in 0:0){print(j)}
i
j = 0
my_sample[j + 1]
View(df)
df$ctr <- NA
for (i in 1:10){
print(i)
id <- df$id[i]
set_to_be_sampled <- setdiff(df$pos[[i]], df$reg[[i]])
sample_size <- length(df$reg[[i]])
my_sample <- sample(set_to_be_sampled, sample_size, replace=FALSE)
for (j in 0:(sample_size-1)){
df$ctr[i + j] <- my_sample[j + 1]
}
i <- i + j + 1
}
View(df)
View(df)
list_of_protein <- df$id
warnings()
list_of_protein[1]
list_of_protein <- as.character(df$id)
View(df)
protein
protein = df$pr
protein = df$protein[1]
protein
View(df)
protein = "P31946"
which(df$id = protein)
which(df$id == protein)
View(df)
protein = "P31947"
which(df$id == protein)
lines <- which(df$id == protein)
lines
first_line <- lines[1]
first_line
set_to_be_sampled <- setdiff(df$pos[[first_line]], df$reg[[first_line]])
set_to_be_sampled
sample_size <- length(df$reg[[first_line]])
sample_size
my_sample <- sample(set_to_be_sampled, sample_size, replace=FALSE)
my_sample
lines
library(tidyr)
df <- pprot[, 1:3]
## ------- Filtramos las filas que contienen -999
df$target <- df$reg
df <- tidyr::unnest(df, target)
## ------- Filtramos las filas que contienen -999
df <- dplyr::filter(df, target != -999)
## ------- Filtramos las lineas en que
df$check <- TRUE
for (i in 1:nrow(df)){
d <- setdiff(df$pos[[i]], df$reg[[i]])
if (length(df$reg[[i]]) > length(d)){
df$check[i] <- FALSE
}
}
df <- df[which(df$check == TRUE), -ncol(df)]
## --- Randomly choosing a control serine position
set.seed(123)
df$ctr <- NA
list_of_protein <- as.character(df$id)
for (protein in list_of_protein){
lines <- which(df$id == protein)
first_line <- lines[1]
set_to_be_sampled <- setdiff(df$pos[[first_line]], df$reg[[first_line]])
sample_size <- length(df$reg[[first_line]])
my_sample <- sample(set_to_be_sampled, sample_size, replace=FALSE)
for (i in 1:lines){
df$ctr[lines[i]] <- my_sample[i]
}
}
View(df)
library(tidyr)
df <- pprot[, 1:3]
## ------- Filtramos las filas que contienen -999
df$target <- df$reg
df <- tidyr::unnest(df, target)
## ------- Filtramos las filas que contienen -999
df <- dplyr::filter(df, target != -999)
## ------- Filtramos las lineas en que
df$check <- TRUE
for (i in 1:nrow(df)){
d <- setdiff(df$pos[[i]], df$reg[[i]])
if (length(df$reg[[i]]) > length(d)){
df$check[i] <- FALSE
}
}
df <- df[which(df$check == TRUE), -ncol(df)]
## --- Randomly choosing a control serine position
set.seed(123)
df$ctr <- NA
list_of_protein <- as.character(df$id)
for (protein in list_of_protein){
lines <- which(df$id == protein)
first_line <- lines[1]
print(first_line)
set_to_be_sampled <- setdiff(df$pos[[first_line]], df$reg[[first_line]])
sample_size <- length(df$reg[[first_line]])
my_sample <- sample(set_to_be_sampled, sample_size, replace=FALSE)
for (i in 1:lines){
df$ctr[lines[i]] <- my_sample[i]
}
}
library(tidyr)
df <- pprot[, 1:3]
## ------- Filtramos las filas que contienen -999
df$target <- df$reg
df <- tidyr::unnest(df, target)
## ------- Filtramos las filas que contienen -999
df <- dplyr::filter(df, target != -999)
## ------- Filtramos las lineas en que
df$check <- TRUE
for (i in 1:nrow(df)){
d <- setdiff(df$pos[[i]], df$reg[[i]])
if (length(df$reg[[i]]) > length(d)){
df$check[i] <- FALSE
}
}
df <- df[which(df$check == TRUE), -ncol(df)]
## --- Randomly choosing a control serine position
set.seed(123)
df$ctr <- NA
list_of_protein <- as.character(df$id)
for (protein in list_of_protein){
lines <- which(df$id == protein)
first_line <- lines[1]
print(first_line)
set_to_be_sampled <- setdiff(df$pos[[first_line]], df$reg[[first_line]])
sample_size <- length(df$reg[[first_line]])
my_sample <- sample(set_to_be_sampled, sample_size, replace=FALSE)
for (i in 1:length(lines)){
df$ctr[lines[i]] <- my_sample[i]
}
}
# for (i in 1:10){
#   print(i)
#   id <- df$id[i]
#   set_to_be_sampled <- setdiff(df$pos[[i]], df$reg[[i]])
#   sample_size <- length(df$reg[[i]])
#   my_sample <- sample(set_to_be_sampled, sample_size, replace=FALSE)
#
#   for (j in 0:(sample_size-1)){
#     df$ctr[i + j] <- my_sample[j + 1]
#   }
#   i <- i + j + 1
}
View(df)
library(tidyr)
df <- pprot[, 1:3]
## ------- Filtramos las filas que contienen -999
df$target <- df$reg
df <- tidyr::unnest(df, target)
## ------- Filtramos las filas que contienen -999
df <- dplyr::filter(df, target != -999)
## ------- Filtramos las lineas en que
df$check <- TRUE
for (i in 1:nrow(df)){
d <- setdiff(df$pos[[i]], df$reg[[i]])
if (length(df$reg[[i]]) > length(d)){
df$check[i] <- FALSE
}
}
df <- df[which(df$check == TRUE), -ncol(df)]
## --- Randomly choosing a control serine position
set.seed(123)
df$ctr <- NA
list_of_protein <- as.character(df$id)
for (protein in list_of_protein){
lines <- which(df$id == protein)
first_line <- lines[1]
print(first_line)
set_to_be_sampled <- setdiff(df$pos[[first_line]], df$reg[[first_line]])
sample_size <- length(df$reg[[first_line]])
my_sample <- sample(set_to_be_sampled, sample_size, replace=FALSE)
for (i in 1:length(lines)){
df$ctr[lines[i]] <- my_sample[i]
}
}
# for (i in 1:10){
#   print(i)
#   id <- df$id[i]
#   set_to_be_sampled <- setdiff(df$pos[[i]], df$reg[[i]])
#   sample_size <- length(df$reg[[i]])
#   my_sample <- sample(set_to_be_sampled, sample_size, replace=FALSE)
#
#   for (j in 0:(sample_size-1)){
#     df$ctr[i + j] <- my_sample[j + 1]
#   }
#   i <- i + j + 1
df$quality <- NA
for (i in 1:nrow(df)){
print(i)
credit <- 5
# ctr and target must be different
if (df$target[i] == df$ctr[i]){
credit <- credit - 1
}
# ctr must belong to pos
if (! df$ctr[i] %in% df$pos[[i]]){
credit <- credit - 1
}
# target must belong to reg
if (! df$target[i] %in% df$reg[[i]]){
credit <- credit - 1
}
# residues at ctr and target positions should be Ser
seq <- ptm::get.seq(df$id[i])
if (! is.at(at = df$ctr[i], target = seq, aa = "S", uniprot = FALSE)){
credit <- credit - 1
}
if (! is.at(at = df$target[i], target = seq, aa = "S", uniprot = FALSE)){
credit <- credit - 1
}
df$quality[i] <- credit
}
t <- df[which(df$quality != 5), ]
View(df)
table(df$quality)
View(t)
library(tidyr)
df <- pprot[, 1:3]
## ------- Filtramos las filas que contienen -999
df$target <- df$reg
df <- tidyr::unnest(df, target)
## ------- Filtramos las filas que contienen -999
df <- dplyr::filter(df, target != -999)
## ------- Filtramos las lineas en que
df$check <- TRUE
for (i in 1:nrow(df)){
d <- setdiff(df$pos[[i]], df$reg[[i]])
if (length(df$reg[[i]]) > length(d)){
df$check[i] <- FALSE
}
}
df <- df[which(df$check == TRUE), -ncol(df)]
## --- Randomly choosing a control serine position
set.seed(123)
df$ctr <- NA
list_of_protein <- as.character(df$id)
for (protein in list_of_protein){
lines <- which(df$id == protein)
first_line <- lines[1]
print(first_line)
set_to_be_sampled <- setdiff(df$pos[[first_line]], df$reg[[first_line]])
sample_size <- length(df$reg[[first_line]])
my_sample <- sample(set_to_be_sampled, sample_size, replace=FALSE)
for (i in 1:length(lines)){
df$ctr[lines[i]] <- my_sample[i]
}
}
View(df)
View(t)
which(df$id == "Q96AP0")
which(df$id == "O43918")
View(df)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(ptm)
load("/Users/juancarlosaledo/ptm_outdropbox/ptm/htdocs/Rmd/vignettes/pprot.Rda")
library(tidyr)
df <- pprot[, 1:3]
## ------- Filtramos las filas que contienen -999
df$target <- df$reg
df <- tidyr::unnest(df, target)
## ------- Filtramos las filas que contienen -999
df <- dplyr::filter(df, target != -999)
## ------- Filtramos las lineas en que
df$check <- TRUE
for (i in 1:nrow(df)){
d <- setdiff(df$pos[[i]], df$reg[[i]])
if (length(df$reg[[i]]) > length(d)){
df$check[i] <- FALSE
}
}
df <- df[which(df$check == TRUE), -ncol(df)]
## --- Randomly choosing a control serine position
set.seed(123)
df$ctr <- NA
list_of_protein <- as.character(df$id)
for (protein in list_of_protein){
lines <- which(df$id == protein)
first_line <- lines[1]
print(first_line)
set_to_be_sampled <- setdiff(df$pos[[first_line]], df$reg[[first_line]])
sample_size <- length(df$reg[[first_line]])
my_sample <- sample(set_to_be_sampled, sample_size, replace=FALSE)
for (i in 1:length(lines)){
df$ctr[lines[i]] <- my_sample[i]
}
}
which(df$id == "O43918")
View(df)
a <- c(156,187)
b <- c(156)
setdiff(a,b)
sample(setdiff(a,b), 1, replace = FALSE)
setdiff(a,b)
setdiff(a,b) -> c
sample(c, 1)
c
?sample
library(tidyr)
df <- pprot[, 1:3]
## ------- Filtramos las filas que contienen -999
df$target <- df$reg
df <- tidyr::unnest(df, target)
## ------- Filtramos las filas que contienen -999
df <- dplyr::filter(df, target != -999)
## ------- Filtramos las lineas en que
df$check <- TRUE
for (i in 1:nrow(df)){
d <- setdiff(df$pos[[i]], df$reg[[i]])
if (length(df$reg[[i]]) > length(d)){
df$check[i] <- FALSE
}
}
df <- df[which(df$check == TRUE), -ncol(df)]
## --- Randomly choosing a control serine position
set.seed(123)
df$ctr <- NA
list_of_protein <- as.character(df$id)
for (protein in list_of_protein){
lines <- which(df$id == protein)
first_line <- lines[1]
print(first_line)
set_to_be_sampled <- setdiff(df$pos[[first_line]], df$reg[[first_line]])
sample_size <- length(df$reg[[first_line]])
if (length(set_to_be_sampled) == 1){
df$ctr[lines[i]] <- set_to_be_sampled
} else {
my_sample <- sample(set_to_be_sampled, sample_size, replace=FALSE)
for (i in 1:length(lines)){
df$ctr[lines[i]] <- my_sample[i]
}
}
}
View(df)
library(tidyr)
df <- pprot[, 1:3]
## ------- Filtramos las filas que contienen -999
df$target <- df$reg
df <- tidyr::unnest(df, target)
## ------- Filtramos las filas que contienen -999
df <- dplyr::filter(df, target != -999)
## ------- Filtramos las lineas en que
df$check <- TRUE
for (i in 1:nrow(df)){
d <- setdiff(df$pos[[i]], df$reg[[i]])
if (length(df$reg[[i]]) > length(d)){
df$check[i] <- FALSE
}
}
df <- df[which(df$check == TRUE), -ncol(df)]
## --- Randomly choosing a control serine position
set.seed(123)
df$ctr <- NA
list_of_protein <- as.character(df$id)
for (protein in list_of_protein){
lines <- which(df$id == protein)
first_line <- lines[1]
print(first_line)
set_to_be_sampled <- setdiff(df$pos[[first_line]], df$reg[[first_line]])
sample_size <- length(df$reg[[first_line]])
if (length(set_to_be_sampled) == 1){
df$ctr[first_line] <- set_to_be_sampled
} else {
my_sample <- sample(set_to_be_sampled, sample_size, replace=FALSE)
for (i in 1:length(lines)){
df$ctr[lines[i]] <- my_sample[i]
}
}
}
View(df)
df$quality <- NA
for (i in 1:nrow(df)){
print(i)
credit <- 5
# ctr and target must be different
if (df$target[i] == df$ctr[i]){
credit <- credit - 1
}
# ctr must belong to pos
if (! df$ctr[i] %in% df$pos[[i]]){
credit <- credit - 1
}
# target must belong to reg
if (! df$target[i] %in% df$reg[[i]]){
credit <- credit - 1
}
# residues at ctr and target positions should be Ser
seq <- ptm::get.seq(df$id[i])
if (! is.at(at = df$ctr[i], target = seq, aa = "S", uniprot = FALSE)){
credit <- credit - 1
}
if (! is.at(at = df$target[i], target = seq, aa = "S", uniprot = FALSE)){
credit <- credit - 1
}
df$quality[i] <- credit
}
t <- df[which(df$quality != 5), ]
View(t)
View(df)
View(t)
is.at(255, "Q96AP0", "S")
aa.at(255, "Q96AP0")
aa.at(248, "Q96AP0")
aa.at(248, "Q96AP0", "metosite")
aa.at(248, "Q96AP0")
?aa.at
?is.at
p.scan("Q96AP0")
p <- p.scan("Q96AP0")
View(p)
aa.at(248, "Q96AP0")
aa.at(255, "Q96AP0")
reg.scan("Q96AP0")
which(df$quality != 5)
to_be_removed <- which(df$quality != 5)
to_be_removed
regpprot <- df[- to_be_removed, ]
table(regpprot$quality)
getwd()
save(regpprot, "./regpprot.Rda")
save(regpprot, file = "./regpprot.Rda")
?sample
sample(c(2,4,6,8), size = 1)
# El problema con el código de abajo estriba en un peligroso comportamiento
# de la función 'sample(x, size, replace = FALSE)' cuando x es un conjunto
# más de un elemento, la función extrae una muestra de tamaño 'size'. Sin
# embargo, cuando x es un conjunto con un único elemento su comportamiento
# es distinto. Por ejemplo:
set.seed(222)
sample(c(2,4,6,8), size = 1)
# El problema con el código de abajo estriba en un peligroso comportamiento
# de la función 'sample(x, size, replace = FALSE)' cuando x es un conjunto
# más de un elemento, la función extrae una muestra de tamaño 'size'. Sin
# embargo, cuando x es un conjunto con un único elemento su comportamiento
# es distinto. Por ejemplo:
set.seed(222)
sample(c(2,4,6,8), size = 1)
# extrae uno de los cuatro elementos, pero si ejecutamos
sample(345, size = 1)
