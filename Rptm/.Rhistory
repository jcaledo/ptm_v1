}
background <- bg
## ----- The target sample to be analyzed
if (is.character(target) & length(target) == 1){ # input as path to the txt
if (gregexpr('txt', target)[[1]] != -1){
sample <- read.csv(target, header = FALSE)
sample <- trimws(as.character(sample$V1))
} else {
stop("A proper path to a txt file should be provided for the target set")
}
} else if (is.character(target) & length(target) > 1){ # input as vector
sample <- trimws(as.character(target))
} else if (is.data.frame(target) & nrow(target) > 1){ # input as dataframe
sample <- trimws(as.character(target))
} else {
stop("A proper target set must be provided")
}
## ----- Check the input background set
if (is.data.frame(background) & ncol(background) == 2){
bg <- trimws(as.character(background[,1]))
} else {
stop("A proper background set must be provided")
}
## ----- Check that the target is included into the background set
sample_bg <- intersect(sample, bg)
if (length(sample) != sum(sample_bg == sample)){
stop("Please, make sure that all the target proteins are contained in the background set")
}
rquery <- a
rm8a
rm(a)
!is.data.frame(rquery)
rquery <- unlist(rquery$GO_id)
target_c <- setdiff(bg, sample)
View(background)
go_target <- background$GO_id[which(background$up_id %in% sample)]
go_target
go_target <- unlist(background$GO_id[which(background$up_id %in% sample)])
go_target
background$GO_id[1]
strsplit(background$GO_id[1], split = ',')
trimws(strsplit(background$GO_id[1], split = ',')[[1]])
go_target <- trimws(strsplit(background$GO_id[which(background$up_id %in% sample)],
split = ',')[[1]])
got_target
go_target
# go_target <- trimws(strsplit(background$GO_id[which(background$up_id %in% sample)], split = ',')[[1]])
go_target <- background$GO_id[which(background$up_id %in% sample)][[1]]
length(go_target)
nchar(go_target)
go_target
# go_target <- trimws(strsplit(background$GO_id[which(background$up_id %in% sample)], split = ',')[[1]])
go_target <- background$GO_id[which(background$up_id %in% sample)]
go_target[1]
go_target[1000]
t <- paste(go_target, collapse = ',')
t
# go_target <- trimws(strsplit(background$GO_id[which(background$up_id %in% sample)], split = ',')[[1]])
go_target <- background$GO_id[which(background$up_id %in% sample)]
go_target <- paste(go_target, collapse = ',')
go_target <- strsplit(go_target, split = ',')
# go_target <- trimws(strsplit(background$GO_id[which(background$up_id %in% sample)], split = ',')[[1]])
go_target <- background$GO_id[which(background$up_id %in% sample)]
go_target <- paste(go_target, collapse = ',')
go_target <- strsplit(go_target, split = ',')[[1]]
length(go_target)
go_target[1]
go_target[1000]
go_target <- trimws(go_target)
go_target[1000]
# -- GO terms from target complement
go_target_c <- background$GO_id[which(background$up_id %in% target_c)]
go_target_c <- paste(go_target_c, collapse = ',')
go_target_c <- strsplit(go_target_c, split = ',')[[1]]
go_target_c <- trimws(go_target_c)
rquery
# -- Contingency Table
# a: number of terms from the query into the target set
# b: number of terms from the query into the target complement set
# c: number of terms from the target which are not present into the query
# d: number of terms from the target complement are not present into the query
a <- intersect(go_target, rquery)
# -- Contingency Table
# a: number of terms from the query into the target set
# b: number of terms from the query into the target complement set
# c: number of terms from the target which are not present into the query
# d: number of terms from the target complement are not present into the query
a <- length(intersect(go_target, rquery))
a <- intersect(c('a', 'b'), 1:10)
length(a)
# -- Contingency Table
# a: number of terms from the query into the target set
# b: number of terms from the query into the target complement set
# c: number of terms from the target which are not present into the query
# d: number of terms from the target complement are not present into the query
a <- length(intersect(go_target, rquery))
b <- length(intersect(go_target_c, rquery))
c <- length(setdiff(go_target, query))
c <- length(setdiff(go_target, rquery))
knitr::opts_chunk$set(echo = TRUE)
library(ptm)
library(knitr)
all <- meto.search(organism = 'Homo sapiens',
oxidant = 'hydrogen peroxide')
target <- unique(all$prot_id[which(all$met_vivo_vitro == 'vivo')])
load("/Users/JCA/ptm_outdropbox/bg.Rda")
background <- bg
rm(all, bg)
## ----- The target sample to be analyzed
if (is.character(target) & length(target) == 1){ # input as path to the txt
if (gregexpr('txt', target)[[1]] != -1){
sample <- read.csv(target, header = FALSE)
sample <- trimws(as.character(sample$V1))
} else {
stop("A proper path to a txt file should be provided for the target set")
}
} else if (is.character(target) & length(target) > 1){ # input as vector
sample <- trimws(as.character(target))
} else if (is.data.frame(target) & nrow(target) > 1){ # input as dataframe
sample <- trimws(as.character(target))
} else {
stop("A proper target set must be provided")
}
## ----- Check the input background set
if (is.data.frame(background) & ncol(background) == 2){
bg <- trimws(as.character(background[,1]))
} else {
stop("A proper background set must be provided")
}
## ----- Check that the target is included into the background set
sample_bg <- intersect(sample, bg)
if (length(sample) != sum(sample_bg == sample)){
stop("Please, make sure that all the target proteins are contained in the background set")
}
target_c <- setdiff(bg, sample) # target complement
rquery <- search.go(query)
query <- 'oxidative stress'
rquery <- search.go(query)
!is.data.frame(rquery)
rquery <- unlist(rquery$GO_id)
View(background)
df_target <- background[which(background$up_id %in% sample), ]
View(df_target)
df_target_c <- background[which(background$up_id %in% target_c), ]
df_target$query <- df_target_c$query <- NA
i=1
df_target$GO_id[i]
t <- trimws(strsplit(df_target$GO_id[i], split = ','))
t
strsplit(df_target$GO_id[i], split = ',')
t <- strsplit(df_target$GO_id[i], split = ',')
t
t <- trimws(t)
t
t <- lapply(t, trimws)
t
t <- strsplit(df_target$GO_id[i], split = ',')
t <- sapply(t, trimws)
t
unlist(t)
t <- strsplit(df_target$GO_id[i], split = ',')
t <- apply(t, trimws)
t <- strsplit(df_target$GO_id[i], split = ',')
t[1]
t[2]
t[1]
t <- strsplit(df_target$GO_id[i], split = ',')[[1]]
t <- trimws(t)
t
a <- 1:5
b <- c('a', 'b')
intersect(a,b)
length(intersect(a,b))
length(intersect(a,c(1,2,3)))
for (i in 1:nrow(df_target)){
t <- strsplit(df_target$GO_id[i], split = ',')[[1]]
t <- trimws(t)
if (length(interset(t, rquery)) > 0){
df_target$query[i] <- TRUE
} else {
df_target$query[i] <- FALSE
}
}
for (i in 1:nrow(df_target)){
t <- strsplit(df_target$GO_id[i], split = ',')[[1]]
t <- trimws(t)
if (length(intersect(t, rquery)) > 0){
df_target$query[i] <- TRUE
} else {
df_target$query[i] <- FALSE
}
}
View(df_target)
sum(df_target)
sum(df_target$query)
# a: number of proteins from the target set with terms present into the query
a <- sum(df_target$query)
# c: number of protein from the target set which terms are absent from the query
c <- nrow(df_target) - a
for (i in 1:nrow(df_target_c)){
t <- strsplit(df_target_c$GO_id[i], split = ',')[[1]]
t <- trimws(t)
if (length(intersect(t, rquery)) > 0){
df_target_c$query[i] <- TRUE
} else {
df_target_c$query[i] <- FALSE
}
}
View(df_target_c)
# b: number of proteins from the target complement set with terms present into the query
b <- sum(df_target_c$query)
# d: number of protein from the target complement set which terms are absent from the query
d <- nrow(df_target_c) - b
?fisher.test
# -- Fisher's test
ct <- matrix(c(a,b,c,d), nrow = 2, byrow = TRUE)
ft <- fisher.test(ct)
ct
ft
206/(206+1197)
140/(140+642)
(206/(206+1197))/(140/(140+642))
View(ft)
ft <- fisher.test(ct, alternative = 'less')
ft
load("/Users/JCA/ptm_outdropbox/ptm/Rptm/tests/testthat/go/sample_vv.Rda")
View(vv)
View(vv)
data <- vv[1:10,1]
save(data, file = "/Users/JCA/ptm_outdropbox/ptm/Rptm/tests/testthat/go")
save(data, file = "Users/JCA/ptm_outdropbox/ptm/Rptm/tests/testthat/go")
save(data, file = "/Users/JCA/ptm_outdropbox/ptm/Rptm/tests/testthat/go/id_set.Rda")
setwd("/Users/JCA/ptm_outdropbox/ptm/Rptm/tests/testthat")
getwd()
rm(vv,data)
a <- background.go(ids = "./go/id_set.txt")
devtools::load_all("~/ptm_outdropbox/ptm/Rptm")
devtools::load_all("~/ptm_outdropbox/ptm/Rptm")
a <- background.go(ids = "./go/id_set.txt")
devtools::load_all("~/ptm_outdropbox/ptm/Rptm")
a <- background.go(ids = "./go/id_set.txt")
View(a)
expect_is(a, 'data.frame')
load("/Users/JCA/ptm_outdropbox/ptm/Rptm/tests/testthat/go/id_set.Rda")
data <- data[1:5,]
data <- data[1:5]
save(data, file = "./id_set.Rda")
data
b <-  background.go(ids = c("Q13015", "Q14667", "P08575", "Q5JSZ5", "P13196"))
a <- background.go(ids = "./go/id_set.txt")
expect_equal(a, b)
load("/Users/JCA/ptm_outdropbox/ptm/Rptm/tests/testthat/go/id_set.Rda")
rm(a)
expect_equal(nrow(a), 5)
a <- background.go(ids = "./go/id_set.txt")
rm(a)
a <- background.go(ids = "./go/id_set.txt")
expect_equal(a, b)
View(a)
View(a)
term.go("GO:0005576")
rm(a)
a <- hdfisher.go(target = c('Q14667', 'Q5JSZ5'),
background = background.go(c("Q13015", "Q14667", "P08575", "Q5JSZ5", "P13196")),
query = 'extracellular')
a
devtools::load_all("~/ptm_outdropbox/ptm/Rptm")
rm(A)
rm(a)
a <- hdfisher.go(target = c('Q14667', 'Q5JSZ5'),
background = background.go(c("Q13015", "Q14667", "P08575", "Q5JSZ5", "P13196")),
query = 'extracellular')
a
devtools::load_all("~/ptm_outdropbox/ptm/Rptm")
devtools::load_all("~/ptm_outdropbox/ptm/Rptm")
rm(a)
a <- hdfisher.go(target = c('Q14667', 'Q5JSZ5'),
background = background.go(c("Q13015", "Q14667", "P08575", "Q5JSZ5", "P13196")),
query = 'extracellular')
a
attributes(a)
expect_is('list', a)
str(a)
expect_is(a, 'list')
expect_is(a[[1]], 'matrix')
expect_is(a[[2]], 'numeric')
expect_true(attributes(a)$query == 'extracellular')
rm(a,b,data)
a <- go.enrich(target = c('Q14667', 'Q5JSZ5'),
background = background.go(c("Q13015", "Q14667", "P08575", "Q5JSZ5", "P13196")),
aspect = 'BP', n = 20)
library(ptm)
a <- go.enrich(target = c('Q14667', 'Q5JSZ5'),
background = background.go(c("Q13015", "Q14667", "P08575", "Q5JSZ5", "P13196")),
aspect = 'BP', n = 20)
devtools::load_all("~/ptm_outdropbox/ptm/Rptm")
a <- go.enrich(target = c('Q14667', 'Q5JSZ5'),
background = background.go(c("Q13015", "Q14667", "P08575", "Q5JSZ5", "P13196")),
aspect = 'BP', n = 20)
getwd()
library(ptm)
a <- go.enrich(target = c('Q14667', 'Q5JSZ5'),
background = background.go(c("Q13015", "Q14667", "P08575", "Q5JSZ5", "P13196")),
aspect = 'BP', n = 20)
load("/Users/JCA/ptm_outdropbox/bg.Rda")
b <- go.enrich(target = c('Q14667', 'Q5JSZ5'), bg, aspect = 'BP', n = 20)
b <- go.enrich(target = c('Q14667', 'Q5JSZ5'), bg, aspect = 'BP', n = 20)
View(bg)
which(bg$up_id == 'Q14667')
which(bg$up_id == 'Q5JSZ5')
b <- go.enrich(target = c('Q14667', 'Q5JSZ5'), bg, aspect = 'BP', n = 1)
devtools::load_all("~/ptm_outdropbox/ptm/Rptm")
b <- go.enrich(target = c('Q14667', 'Q5JSZ5'), bg, aspect = 'BP', n = 20)
devtools::load_all("~/ptm_outdropbox/ptm/Rptm")
b <- go.enrich(target = c('Q14667', 'Q5JSZ5'), bg, aspect = 'BP', n = 20)
library(topGO)
b <- go.enrich(target = c('Q14667', 'Q5JSZ5'), bg, aspect = 'BP', n = 20)
View(b)
detach("package:topGO", unload = TRUE)
library(ptm)
load("/Users/JCA/ptm_outdropbox/bg.Rda")
View(bg)
View(bg)
target <- c('P01009', 'P01374')
background <- bg
aspect = 'BP'
n = 20
## ----- The target sample to be analyzed
if (is.character(target) & length(target) == 1){ # input as path to the txt
if (gregexpr('txt', target)[[1]] != -1){
sample <- read.csv(target, header = FALSE)
sample <- trimws(as.character(sample$V1))
} else {
stop("A proper path to a txt file should be provided for the target set")
}
} else if (is.character(target) & length(target) > 1){ # input as vector
sample <- trimws(as.character(target))
} else if (is.data.frame(target) & nrow(target) > 1){ # input as dataframe
sample <- trimws(as.character(target))
} else {
stop("A proper target set must be provided")
}
## ----- Check the input background set
if (is.data.frame(background) & ncol(background) == 2){
bg <- trimws(as.character(background[,1]))
} else {
stop("A proper background set must be provided")
}
## ----- Check that the target is included into the background set
sample_bg <- intersect(sample, bg)
if (length(sample) != sum(sample_bg == sample)){
stop("Please, make sure that all the target proteins are contained in the background set")
}
## ----- Getting GO ids for the backgraund set
bg <- data.frame(up_id = bg, GO_id = background[,2])
bg_proteins <- bg$up_id
write.table(bg, file = "file_temp.map", quote = FALSE,
sep = "\t", row.names = FALSE, col.names = FALSE)
bg2GO <- topGO::readMappings(file = 'file_temp.map')
bg2GO
bg_proteins <- names(bg2GO)
file.remove("file_temp.map")
## ------- Compare sample vs bg_proteins
# It is essential that the items in the 'sample' vector
# correspond to items within the background ie 'bg_proteins'
compared_proteins <- factor(as.integer(bg_proteins %in% sample))
names(compared_proteins) <- bg_proteins
## ------- Create topGO object
GOdata <- new("topGOdata", ontology = aspect, allGenes = compared_proteins,
annot = annFUN.gene2GO, gene2GO = bg2GO)
GOdata <- new("topGOdata", ontology = aspect, allGenes = compared_proteins,
annot = annFUN, gene2GO = bg2GO)
GOdata <- new("topGOdata", ontology = aspect, allGenes = compared_proteins,
annot = topGO::annFUN.gene2GO, gene2GO = bg2GO)
GOdata <- new("topGOdata", ontology = aspect, allGenes = compared_proteins,
annot = topGO::annFUN, gene2GO = bg2GO)
GOdata <- new("topGOdata", ontology = aspect, allGenes = compared_proteins,
gene2GO = bg2GO)
?annFUN
GOdata <- new("topGOdata", ontology = aspect, allGenes = compared_proteins,
annot = topGO::annFUN.gene2GO(), gene2GO = bg2GO)
GOdata <- new("topGOdata", ontology = aspect, allGenes = compared_proteins,
annot = topGO::annFUN.gene2GO, gene2GO = bg2GO)
GOdata <- new("topGOdata", ontology = aspect, allGenes = compared_proteins,
annot = topGO::annFUN.gene2GO, gene2GO = bg2GO)
GOdata <- new("topGOdata", ontology = aspect, allGenes = compared_proteins,
annot = annFUN.gene2GO, gene2GO = bg2GO)
GOdata <- new("topGOdata", ontology = aspect, allGenes = compared_proteins,
annot = 'annFUN.gene2GO', gene2GO = bg2GO)
GOdata <- new("topGOdata", ontology = aspect, allGenes = compared_proteins,
annot = annFUN.gene2GO, gene2GO = bg2GO)
GOdata <- new("topGOdata", ontology = aspect, allGenes = compared_proteins,
annot = annFUN.gene2GO, gene2GO = bg2GO)
topGO:::annFUN.gene2GO()
topGO:::annFUN.gene2GO
.get.exepath <- function(prg) {
paths <- list(
pymol = list(
Linux = c("/usr/bin/pymol",
"/usr/local/bin/pymol"),
Darwin = c("/Applications/MacPyMOL.app/Contents/MacOS/MacPyMOL",
"/Applications/MacPyMOLX11Hybrid.app/Contents/MacOS/MacPyMOL",
"/usr/bin/pymol",
"/usr/local/bin/pymol"),
Windows = c("C:/python27/PyMOL/pymol.exe",
"C:/Program Files/PyMOL/PyMOL/PymolWin.exe",
"C:/Program Files/PyMOL/PymolWin.exe"),
ver = "-cq"
),
muscle = list(
Linux = c("/usr/bin/muscle",
"/usr/local/bin/muscle"),
Darwin = c("/usr/bin/muscle",
"/usr/local/bin/muscle"),
Windows = c("C:/Program Files/muscle.exe",
"C:/Program Files/muscle3.8.31_i86win32.exe",
"C:/Program Files/muscle/muscle.exe",
"C:/Program Files/Muscle/muscle.exe",
"C:/Program Files/seaview/muscle.exe",
"C:/Program Files/seaview4/muscle.exe"),
ver = "-version"
),
foldx = list(
Linux = c("/usr/bin/foldx",
"/usr/local/bin/foldx"),
Darwin = c("/usr/bin/foldx",
"/usr/local/bin/foldx"),
Windows = c("C:/Program Files/foldx.exe",
"C:/Program Files/foldx/foldx.exe",
"C:/Program Files/FoldX/foldx.exe"),
ver = "--version"
),
dssp = list(
Linux = c("/usr/bin/dssp",
"/usr/local/bin/dssp"),
Darwin = c("/usr/bin/dssp",
"/usr/local/bin/dssp",
"/usr/bin/mkdssp",
"/usr/local/bin/mkdssp",
"/anaconda3/bin/dssp",
"/anaconda3/bin/mkdssp"),
Windows = c("C:/Program Files/dssp.exe",
"C:/Program Files/dssp-2.0.4-win32.exe",
"C:/Program Files/dssp/dssp.exe",
"C:/Program Files/Dssp/dssp.exe"),
ver = "--version"
)
)
## user provided full path
if(file.exists(prg) & !dir.exists(prg)) {
return(prg)
}
## try to automatically determine path
exefile <- Sys.which(prg)
if(nchar(exefile) == 0) {
if(prg %in% c("pymol", "muscle", "clustalo", "dssp")) {
## determine os
os1 <- Sys.info()["sysname"]
## use guess-paths defined above
exefiles <- paths[[prg]][[os1]]
fe <- file.exists(exefiles)
if(any(fe)) {
exefile <- exefiles[which(fe)[1]]
}
else {
exefile <- NULL
}
}
else {
exefile <- NULL
}
}
if(is.null(exefile)) {
stop(paste0("could not determine path to '", prg, "'"))
}
return(exefile)
}
devtools::load_all(".")
library(ptm)
getwd()
a <- go.enrich(target = c('Q14667', 'Q5JSZ5'),
background = background.go(c("Q13015", "Q14667", "P08575", "Q5JSZ5", "P13196")),
aspect = 'BP', n = 20)
devtools::load_all(".")
library(topGO)
a <- get(GOBPTerm)
ls(GOBPTerm)
environment()
ls()
ls
ls(GOBPTerm)
search()
detach("package:topGO", unload = TRUE)
search()
ls(GOBPTerm)
ls(GO.db)
library(topGO)
ls(topGO)
search()
ls(topGO)
ls
ls()
search()
where(topGO)
where(GOBPTerm)
ls(GOBPTerm)
library(pryr)
install.packages("pryr")
library(pryr)
where(GOBPTerm)
where('GOBPTerm')
source('~/.active-rstudio-document')
