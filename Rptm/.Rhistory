db = db,
pvalue_thresh = p,
fast_mode = NA,
output_excel = NA,
output_revigo = NA,
output_unresolved = NA,
species = sp
)
resp_gorilla <- httr::POST(url = "http://cbl-gorilla.cs.technion.ac.il/servlet/GOrilla",
body = query_parameters)
if (httr::status_code(resp_gorilla) > 300){
stop(paste("The server responded: ", httr::status_code(resp_gorilla)))
}
## -------------------------------------- Results ---------------------------------------- ##
response <- httr::GET(resp_gorilla$url)
httr::status_code(response)
if (httr::status_code(response) >= 200 & httr::status_code(response) < 300){
work_id <- strsplit(resp_gorilla$url, split = "id=")[[1]][2]
base_res_url <- "http://cbl-gorilla.cs.technion.ac.il/GOrilla/"
if (db == 'proc'){
process_url <- paste(base_res_url, work_id, "/GO.xls", sep = "")
process_df <- read.delim(process_url)
output <-  process_df
} else if (db == 'func'){
function_url <- paste(base_res_url, work_id, "/GO.xls", sep = "")
function_df <- read.delim(function_url)
output <-  function_df
} else if (db == 'comp'){
component_url <- paste(base_res_url, work_id, "/GO.xls", sep = "")
component_df <- read.delim(component_url)
output <-  component_df
} else {
process_url <- paste(base_res_url, work_id, "/GOPROCESS.xls", sep = "")
function_url <- paste(base_res_url, work_id, "/GOFUNCTION.xls", sep = "")
component_url <- paste(base_res_url, work_id, "/GOCOMPONENT.xls", sep = "")
response_results <- httr::GET(process_url)
wait <- TRUE
times <- 0
while (wait & times < 7){
if (httr::status_code(response_results) == 200){
wait <- FALSE
}
times <- times + 1
Sys.sleep(10)
}
process_df <- read.delim(process_url)
function_df <- read.delim(function_url)
component_df <- read.delim(component_url)
# Sys.sleep(60)
output <- list(process_df, function_df, component_df)
}
attr(output, 'target') <- target
attr(output, 'background') <- background
attr(output, 'run mode') <- mode
attr(output, 'db') <- db
attr(output, 'pValue') <- p
if (warn){
warning(warn_message)
}
} else {
output <- httr::status_code(response)
}
if (warn){
warning(warn_message)
}
if (httr::status_code(response) >= 200 & httr::status_code(response) < 300){
work_id <- strsplit(resp_gorilla$url, split = "id=")[[1]][2]
base_res_url <- "http://cbl-gorilla.cs.technion.ac.il/GOrilla/"
if (db == 'proc'){
process_url <- paste(base_res_url, work_id, "/GO.xls", sep = "")
process_df <- read.delim(process_url)
output <-  process_df
} else if (db == 'func'){
function_url <- paste(base_res_url, work_id, "/GO.xls", sep = "")
function_df <- read.delim(function_url)
output <-  function_df
} else if (db == 'comp'){
component_url <- paste(base_res_url, work_id, "/GO.xls", sep = "")
component_df <- read.delim(component_url)
output <-  component_df
} else {
process_url <- paste(base_res_url, work_id, "/GOPROCESS.xls", sep = "")
function_url <- paste(base_res_url, work_id, "/GOFUNCTION.xls", sep = "")
component_url <- paste(base_res_url, work_id, "/GOCOMPONENT.xls", sep = "")
response_results <- httr::GET(process_url)
wait <- TRUE
times <- 0
while (wait & times < 7){
if (httr::status_code(response_results) == 200){
wait <- FALSE
}
times <- times + 1
Sys.sleep(10)
}
process_df <- read.delim(process_url)
function_df <- read.delim(function_url)
component_df <- read.delim(component_url)
# Sys.sleep(60)
output <- list(process_df, function_df, component_df)
}
attr(output, 'target') <- target
attr(output, 'background') <- background
attr(output, 'run mode') <- mode
attr(output, 'db') <- db
attr(output, 'pValue') <- p
if (warn){
warning(warn_message)
}
} else {
output <- httr::status_code(response)
}
httr::status_code(response)
if (httr::status_code(response) >= 200 & httr::status_code(response) < 300){
work_id <- strsplit(resp_gorilla$url, split = "id=")[[1]][2]
base_res_url <- "http://cbl-gorilla.cs.technion.ac.il/GOrilla/"
if (db == 'proc'){
process_url <- paste(base_res_url, work_id, "/GO.xls", sep = "")
process_df <- read.delim(process_url)
output <-  process_df
} else if (db == 'func'){
function_url <- paste(base_res_url, work_id, "/GO.xls", sep = "")
function_df <- read.delim(function_url)
output <-  function_df
} else if (db == 'comp'){
component_url <- paste(base_res_url, work_id, "/GO.xls", sep = "")
component_df <- read.delim(component_url)
output <-  component_df
} else {
process_url <- paste(base_res_url, work_id, "/GOPROCESS.xls", sep = "")
function_url <- paste(base_res_url, work_id, "/GOFUNCTION.xls", sep = "")
component_url <- paste(base_res_url, work_id, "/GOCOMPONENT.xls", sep = "")
response_results <- httr::GET(process_url)
wait <- TRUE
times <- 0
while (wait & times < 7){
if (httr::status_code(response_results) == 200){
wait <- FALSE
}
times <- times + 1
Sys.sleep(10)
}
process_df <- read.delim(process_url)
function_df <- read.delim(function_url)
component_df <- read.delim(component_url)
# Sys.sleep(60)
output <- list(process_df, function_df, component_df)
}
attr(output, 'target') <- target
attr(output, 'background') <- background
attr(output, 'run mode') <- mode
attr(output, 'db') <- db
attr(output, 'pValue') <- p
if (warn){
warning(warn_message)
}
} else {
output <- httr::status_code(response)
}
rm(list = ls())
getwd()
target <- './go/GOvivo.txt'
background = NULL
mode = 'mhg'
db = 'proc'
pvalue = 0.001
species = 'Homo sapiens'
## ------------------------------- Check arguments --------------------------------- ##
warn <- FALSE
warn_message <- c()
if (! file.exists(target)){
stop("Please, provide a proper target file")
} else {
target <- httr::upload_file(target)
}
if (mode == 'mhg'){
background = NULL
} else if (mode == 'hg'){
if (! file.exists(background)){
stop("Please, provide a proper background file")
} else {
background <- httr::upload_file(background)
}
} else {
mode <- 'mhg'
warn <- TRUE
warn_message <- c(warn_message, "Run mode has been set to 'mgh'")
}
if (! db %in% c('proc', 'func', 'comp', 'all')){
db <- 'all'
warn <- TRUE
warn_message <- c(warn_message, "db has been set to 'all")
}
organism <- c('Arabidopsis thaliana', 'Caenorhabditis elegans', 'Danio rerio',
'Drosophila melanogaster', 'Homo sapiens', 'Mus musculus',
'Rattus norvegicus', 'Saccharomyces cerevisiae')
if (species %in% organism){
sp <- gsub(' ', '_', toupper(species))
} else {
sp <- "HOMO_SAPIENS"
warn <- TRUE
warn_message <- c(warn_message, "species has been set to 'HOMO_SAPIENS")
}
if (is.numeric(pvalue)){
closest <- c()
for (n in (3:11)){
closest <- c(closest, abs(pvalue - (1/10^n)))
}
closest <- which(closest == min(closest)) + 2
p <- 1/10^closest
p <- as.character(p)
} else {
stop("A proper numeric p-Value should be provided")
}
## --------------------------------- Form ----------------------------------- ##
query_parameters <- list(
application = "gorilla",
run_mode = mode,
target_file_name = target,
background_file_name = background,
db = db,
pvalue_thresh = p,
fast_mode = NA,
output_excel = NA,
output_revigo = NA,
output_unresolved = NA,
species = sp
)
resp_gorilla <- httr::POST(url = "http://cbl-gorilla.cs.technion.ac.il/servlet/GOrilla",
body = query_parameters)
httr::status_code(resp_gorilla)
if (httr::status_code(resp_gorilla) > 300){
stop(paste("The server responded: ", httr::status_code(resp_gorilla)))
}
## -------------------------------------- Results ---------------------------------------- ##
response <- httr::GET(resp_gorilla$url)
httr::status_code(response)
work_id <- strsplit(resp_gorilla$url, split = "id=")[[1]][2]
base_res_url <- "http://cbl-gorilla.cs.technion.ac.il/GOrilla/"
process_url <- paste(base_res_url, work_id, "/GO.xls", sep = "")
process_df <- read.delim(process_url)
output <-  process_df
View(output)
process_url
process_df <- read.delim(process_url)
function_df <- read.delim(function_url)
component_df <- read.delim(component_url)
# Sys.sleep(60)
output <- list(process_df, function_df, component_df)
View(output)
rm(list=ls())
a <- gorilla(target = './go/GOvivo.txt')
target = './go/GOt.txt'
mode = 'mhg'
db = 'proc'
pvalue = 0.001
species = 'Homo sapiens'
## ------------------------------- Check arguments --------------------------------- ##
warn <- FALSE
warn_message <- c()
if (! file.exists(target)){
stop("Please, provide a proper target file")
} else {
target <- httr::upload_file(target)
}
if (mode == 'mhg'){
background = NULL
} else if (mode == 'hg'){
if (! file.exists(background)){
stop("Please, provide a proper background file")
} else {
background <- httr::upload_file(background)
}
} else {
mode <- 'mhg'
warn <- TRUE
warn_message <- c(warn_message, "Run mode has been set to 'mgh'")
}
if (! db %in% c('proc', 'func', 'comp', 'all')){
db <- 'all'
warn <- TRUE
warn_message <- c(warn_message, "db has been set to 'all")
}
organism <- c('Arabidopsis thaliana', 'Caenorhabditis elegans', 'Danio rerio',
'Drosophila melanogaster', 'Homo sapiens', 'Mus musculus',
'Rattus norvegicus', 'Saccharomyces cerevisiae')
if (species %in% organism){
sp <- gsub(' ', '_', toupper(species))
} else {
sp <- "HOMO_SAPIENS"
warn <- TRUE
warn_message <- c(warn_message, "species has been set to 'HOMO_SAPIENS")
}
if (is.numeric(pvalue)){
closest <- c()
for (n in (3:11)){
closest <- c(closest, abs(pvalue - (1/10^n)))
}
closest <- which(closest == min(closest)) + 2
p <- 1/10^closest
p <- as.character(p)
} else {
stop("A proper numeric p-Value should be provided")
}
## --------------------------------- Form ----------------------------------- ##
query_parameters <- list(
application = "gorilla",
run_mode = mode,
target_file_name = target,
background_file_name = background,
db = db,
pvalue_thresh = p,
fast_mode = NA,
output_excel = NA,
output_revigo = NA,
output_unresolved = NA,
species = sp
)
resp_gorilla <- httr::POST(url = "http://cbl-gorilla.cs.technion.ac.il/servlet/GOrilla",
body = query_parameters)
httr::status_code(resp_gorilla)
if (httr::status_code(resp_gorilla) > 300){
stop(paste("The server responded: ", httr::status_code(resp_gorilla)))
}
## -------------------------------------- Results ---------------------------------------- ##
response <- httr::GET(resp_gorilla$url)
httr::status_code(response)
if (httr::status_code(response) >= 200 & httr::status_code(response) < 300){
work_id <- strsplit(resp_gorilla$url, split = "id=")[[1]][2]
base_res_url <- "http://cbl-gorilla.cs.technion.ac.il/GOrilla/"
if (db == 'proc'){
process_url <- paste(base_res_url, work_id, "/GO.xls", sep = "")
process_df <- read.delim(process_url)
output <-  process_df
} else if (db == 'func'){
function_url <- paste(base_res_url, work_id, "/GO.xls", sep = "")
function_df <- read.delim(function_url)
output <-  function_df
} else if (db == 'comp'){
component_url <- paste(base_res_url, work_id, "/GO.xls", sep = "")
component_df <- read.delim(component_url)
output <-  component_df
} else {
process_url <- paste(base_res_url, work_id, "/GOPROCESS.xls", sep = "")
function_url <- paste(base_res_url, work_id, "/GOFUNCTION.xls", sep = "")
component_url <- paste(base_res_url, work_id, "/GOCOMPONENT.xls", sep = "")
response_results <- httr::GET(process_url)
wait <- TRUE
times <- 0
while (wait & times < 7){
if (httr::status_code(response_results) == 200){
wait <- FALSE
}
times <- times + 1
Sys.sleep(10)
}
process_df <- read.delim(process_url)
function_df <- read.delim(function_url)
component_df <- read.delim(component_url)
# Sys.sleep(60)
output <- list(process_df, function_df, component_df)
}
attr(output, 'target') <- target
attr(output, 'background') <- background
attr(output, 'run mode') <- mode
attr(output, 'db') <- db
attr(output, 'pValue') <- p
if (warn){
warning(warn_message)
}
} else {
output <- httr::status_code(response)
}
work_id
work_id <- strsplit(resp_gorilla$url, split = "id=")[[1]][2]
work_id
base_res_url <- "http://cbl-gorilla.cs.technion.ac.il/GOrilla/"
base_res_url
process_url <- paste(base_res_url, work_id, "/GO.xls", sep = "")
process_url
process_df
process_df <- read.delim(process_url)
process_url
process_url <- paste(base_res_url, work_id, "/GO.xls", sep = "")
process_df <- read.delim(process_url)
process_url
resp_gorilla$url
target
rm(list = ls())
target <- './go/GOvivo.txt'
## ------------------------------- Check arguments --------------------------------- ##
warn <- FALSE
warn_message <- c()
if (! file.exists(target)){
stop("Please, provide a proper target file")
} else {
target <- httr::upload_file(target)
}
View(target)
mode = 'mhg'
db = 'proc'
pvalue = 0.001
species = 'Homo sapiens'
if (mode == 'mhg'){
background = NULL
} else if (mode == 'hg'){
if (! file.exists(background)){
stop("Please, provide a proper background file")
} else {
background <- httr::upload_file(background)
}
} else {
mode <- 'mhg'
warn <- TRUE
warn_message <- c(warn_message, "Run mode has been set to 'mgh'")
}
if (! db %in% c('proc', 'func', 'comp', 'all')){
db <- 'all'
warn <- TRUE
warn_message <- c(warn_message, "db has been set to 'all")
}
organism <- c('Arabidopsis thaliana', 'Caenorhabditis elegans', 'Danio rerio',
'Drosophila melanogaster', 'Homo sapiens', 'Mus musculus',
'Rattus norvegicus', 'Saccharomyces cerevisiae')
if (species %in% organism){
sp <- gsub(' ', '_', toupper(species))
} else {
sp <- "HOMO_SAPIENS"
warn <- TRUE
warn_message <- c(warn_message, "species has been set to 'HOMO_SAPIENS")
}
if (is.numeric(pvalue)){
closest <- c()
for (n in (3:11)){
closest <- c(closest, abs(pvalue - (1/10^n)))
}
closest <- which(closest == min(closest)) + 2
p <- 1/10^closest
p <- as.character(p)
} else {
stop("A proper numeric p-Value should be provided")
}
query_parameters
## --------------------------------- Form ----------------------------------- ##
query_parameters <- list(
application = "gorilla",
run_mode = mode,
target_file_name = target,
background_file_name = background,
db = db,
pvalue_thresh = p,
fast_mode = NA,
output_excel = NA,
output_revigo = NA,
output_unresolved = NA,
species = sp
)
resp_gorilla <- httr::POST(url = "http://cbl-gorilla.cs.technion.ac.il/servlet/GOrilla",
body = query_parameters)
httr::status_code(resp_gorilla)
resp_gorilla$url
## -------------------------------------- Results ---------------------------------------- ##
response <- httr::GET(resp_gorilla$url)
httr::status_code(response)
work_id <- strsplit(resp_gorilla$url, split = "id=")[[1]][2]
paste(base_res_url, work_id, "/GO.xls", sep = "")
base_res_url <- "http://cbl-gorilla.cs.technion.ac.il/GOrilla/"
process_url <- paste(base_res_url, work_id, "/GO.xls", sep = "")
process_url
process_df <- read.delim(process_url)
output <-  process_df
View(output)
rm(list = ls())
a <- gorilla(target = './go/GOvivo.txt')
devtools::load_all("~/ptm_outdropbox/ptm/Rptm")
a <- gorilla(target = './go/GOvivo.txt')
b <- gorilla(target = './go/GOt.txt')
expect_is(a, 'data.frame')
expect_is(a, 'data.frame')
is.data.frame(a)
View(a)
expect_gt(nrow(a), 100)
expect_gt(ncol(a), 8)
b <- gorilla(target = './go/GOvivo.txt', db = 'all')
b1<-b[[1]]
View(b1)
b2<-b[[2]]
View(b2)
b3<-b[[3]]
View(b3)
c <- gorilla(target = './go/GOvivo.txt',
background = './go/GObackground.txt',
mode = 'hg')
devtools::load_all("~/ptm_outdropbox/ptm/Rptm")
rm(a)
a <- gorilla(target = './go/GOvivo.txt')
c <- gorilla(target = './go/GOvivo.txt',
background = './go/GObackground.txt',
mode = 'hg')
View(c)
d <- gorilla(target = './go/GOvivo.txt',
background = './go/GObackground.txt',
db = 'func', mode = 'hg')
devtools::load_all("~/ptm_outdropbox/ptm/Rptm")
devtools::load_all("~/ptm_outdropbox/ptm/Rptm")
d <- gorilla(target = './go/GOvivo.txt',
background = './go/GObackground.txt',
db = 'func', mode = 'hg')
11192/447
18192/250
18192/25
is.list(b)
expect_is(b[[1]], 'data.frame')
