output$date[i] <- t[9]
}
return(output)
}
## ------------------------- Subfunction for filtered list --------------------- ##
filtered.list <- function(id){
baseURL <- 'https://www.uniprot.org/uniprot/?query='
requestURL <- paste(baseURL, id, '&format=tab&columns=id%2Cgo', sep = "")
resp <- .get.url(requestURL)
cont <- httr::content(resp, 'text')
a <- strsplit(cont, split = '\n')[[1]] # all the lines
b <- a[which(grepl(id, a))]
c <- strsplit(b, split = "\t")[[1]][2] # only term names and GO ids
d <-  strsplit(c, split = ";")[[1]] # a single line by term
if (length(d) < 2){
stop(print(d))
}
output <- as.data.frame(matrix(rep(NA,length(d)*2), ncol = 2))
names(output) <- c('term_name', 'GO_id')
for (i in 1:length(d)){
output$term_name[i] <- trimws( strsplit(d[i], split = '\\[')[[1]][1] )
output$GO_id[i] <- gsub('\\]', '', strsplit(d[i], split = '\\[')[[1]][2])
}
## ---- Removing spurious rows if necessary
output <- output[which(substr(output$GO_id, 1, 2) == "GO"), ]
if (sum(is.na(output$GO_id)) == nrow(output)){
return(paste("Sorry, no GO terms found for the ", id, " entry", sep = ""))
} else {
output$obsolete <- output$definition_text <- output$aspect <- NA
for (i in 1:nrow(output)){
t <- strsplit(output$GO_id[i], split = ":")[[1]][2]
url <- 'https://www.ebi.ac.uk/QuickGO/services/ontology/go/search?query=GO%3A'
call <- paste(url, t, '&limit=1&page=1', sep = "")
resp <- .get.url(call)
cont <- httr::content(resp, 'text')
cont <- jsonlite::fromJSON(cont, flatten = TRUE)$results
if ("isObsolete" %in% names(cont)){
output$obsolete[i] <- cont$isObsolete
}
if ("definition.text" %in% names(cont)){
output$definition_text[i] <- cont$definition.text
}
if ("aspect" %in% names(cont)){
output$aspect[i] <- cont$aspect
}
>>>>>>> cd82bba62dc029a14e3cba4d8e69d8e2c0b79653
}
}
<<<<<<< HEAD
work_id
work_id <- strsplit(resp_gorilla$url, split = "id=")[[1]][2]
work_id
base_res_url <- "http://cbl-gorilla.cs.technion.ac.il/GOrilla/"
base_res_url
process_url <- paste(base_res_url, work_id, "/GO.xls", sep = "")
process_url
process_df
process_df <- read.delim(process_url)
process_url
process_url <- paste(base_res_url, work_id, "/GO.xls", sep = "")
process_df <- read.delim(process_url)
process_url
resp_gorilla$url
target
rm(list = ls())
target <- './go/GOvivo.txt'
## ------------------------------- Check arguments --------------------------------- ##
warn <- FALSE
warn_message <- c()
if (! file.exists(target)){
stop("Please, provide a proper target file")
} else {
target <- httr::upload_file(target)
}
View(target)
mode = 'mhg'
db = 'proc'
pvalue = 0.001
species = 'Homo sapiens'
if (mode == 'mhg'){
background = NULL
} else if (mode == 'hg'){
if (! file.exists(background)){
stop("Please, provide a proper background file")
} else {
background <- httr::upload_file(background)
}
} else {
mode <- 'mhg'
warn <- TRUE
warn_message <- c(warn_message, "Run mode has been set to 'mgh'")
}
if (! db %in% c('proc', 'func', 'comp', 'all')){
db <- 'all'
warn <- TRUE
warn_message <- c(warn_message, "db has been set to 'all")
}
organism <- c('Arabidopsis thaliana', 'Caenorhabditis elegans', 'Danio rerio',
'Drosophila melanogaster', 'Homo sapiens', 'Mus musculus',
'Rattus norvegicus', 'Saccharomyces cerevisiae')
if (species %in% organism){
sp <- gsub(' ', '_', toupper(species))
} else {
sp <- "HOMO_SAPIENS"
warn <- TRUE
warn_message <- c(warn_message, "species has been set to 'HOMO_SAPIENS")
}
if (is.numeric(pvalue)){
closest <- c()
for (n in (3:11)){
closest <- c(closest, abs(pvalue - (1/10^n)))
}
closest <- which(closest == min(closest)) + 2
p <- 1/10^closest
p <- as.character(p)
} else {
stop("A proper numeric p-Value should be provided")
}
query_parameters
## --------------------------------- Form ----------------------------------- ##
query_parameters <- list(
application = "gorilla",
run_mode = mode,
target_file_name = target,
background_file_name = background,
db = db,
pvalue_thresh = p,
fast_mode = NA,
output_excel = NA,
output_revigo = NA,
output_unresolved = NA,
species = sp
)
resp_gorilla <- httr::POST(url = "http://cbl-gorilla.cs.technion.ac.il/servlet/GOrilla",
body = query_parameters)
httr::status_code(resp_gorilla)
resp_gorilla$url
## -------------------------------------- Results ---------------------------------------- ##
response <- httr::GET(resp_gorilla$url)
httr::status_code(response)
work_id <- strsplit(resp_gorilla$url, split = "id=")[[1]][2]
paste(base_res_url, work_id, "/GO.xls", sep = "")
base_res_url <- "http://cbl-gorilla.cs.technion.ac.il/GOrilla/"
process_url <- paste(base_res_url, work_id, "/GO.xls", sep = "")
process_url
process_df <- read.delim(process_url)
output <-  process_df
View(output)
rm(list = ls())
a <- gorilla(target = './go/GOvivo.txt')
devtools::load_all("~/ptm_outdropbox/ptm/Rptm")
a <- gorilla(target = './go/GOvivo.txt')
b <- gorilla(target = './go/GOt.txt')
expect_is(a, 'data.frame')
expect_is(a, 'data.frame')
is.data.frame(a)
View(a)
expect_gt(nrow(a), 100)
expect_gt(ncol(a), 8)
b <- gorilla(target = './go/GOvivo.txt', db = 'all')
b1<-b[[1]]
View(b1)
b2<-b[[2]]
View(b2)
b3<-b[[3]]
View(b3)
c <- gorilla(target = './go/GOvivo.txt',
background = './go/GObackground.txt',
mode = 'hg')
devtools::load_all("~/ptm_outdropbox/ptm/Rptm")
rm(a)
a <- gorilla(target = './go/GOvivo.txt')
c <- gorilla(target = './go/GOvivo.txt',
background = './go/GObackground.txt',
mode = 'hg')
View(c)
d <- gorilla(target = './go/GOvivo.txt',
background = './go/GObackground.txt',
db = 'func', mode = 'hg')
devtools::load_all("~/ptm_outdropbox/ptm/Rptm")
devtools::load_all("~/ptm_outdropbox/ptm/Rptm")
d <- gorilla(target = './go/GOvivo.txt',
background = './go/GObackground.txt',
db = 'func', mode = 'hg')
11192/447
18192/250
18192/25
is.list(b)
expect_is(b[[1]], 'data.frame')
=======
return(output)
}
## ------- Building the output dataframe ----------------- ##
if (filter){
output <- filtered.list(id)
} else {
output <- complet.list(id)
}
if (format == 'string'){
output <- paste(output$GO_id, collapse = ", ")
}
return(output)
}
p <- get.go(background[i])
library(ptm)
p <- get.go(background[i])
library(ptm)
p <- get.go(background[i])
p <- get.go('P01009')
p <- ptm::get.go('P01009')
p <- ptm::get.go(background[i])
library(ptm)
p <- ptm::get.go(background[i])
background[i]
f <- get.go(id = 'P00367') # no GO terms found
p
get.go(trimws(bg$up_id[i]), format = 'string')
q <- get.go('Q14687')
q <- ptm::get.go('Q14687')
get.go(trimws(bg$up_id[i]), format = 'string')
ptm::get.go(trimws(bg$up_id[i]), format = 'string')
ptm::get.go(trimws('Q14687'), format = 'string')
ptm::get.go('Q14687', format = 'string')
library(ptm)
for (i in 669:nrow(bg)){
print(i)
bg$GO_id[i] <- get.go(trimws(bg$up_id[i]), format = 'string')
}
for (i in 669:nrow(bg)){
print(i)
bg$GO_id[i] <- ptm::get.go(trimws(bg$up_id[i]), format = 'string')
}
library(ptm)
library(ptm)
for (i in 669:nrow(bg)){
print(i)
bg$GO_id[i] <- get.go(trimws(bg$up_id[i]), format = 'string')
}
for (i in 669:nrow(bg)){
print(i)
bg$GO_id[i] <- ptm::get.go(trimws(bg$up_id[i]), format = 'string')
}
?get.go
get.go()
get.go
devtools::load_all(".")
devtools::load_all(".")
rm(get.go)
rm(filtered.list)
library(ptm)
for (i in 669:nrow(bg)){
print(i)
bg$GO_id[i] <- get.go(trimws(bg$up_id[i]), format = 'string')
}
get.go(trimws(bg$up_id[i]), format = 'string')
library(ptm)
for (i in 669:nrow(bg)){
print(i)
bg$GO_id[i] <- get.go(trimws(bg$up_id[i]), format = 'string')
}
get.go(trimws(bg$up_id[i]), format = 'string')
get.go(trimws(bg$up_id[i]))
get.go(trimws(bg$up_id[i])) -> p
p
p$GO_id
atomic(p)
is.atomic(p)
library(ptm)
for (i in 669:nrow(bg)){
print(i)
bg$GO_id[i] <- get.go(trimws(bg$up_id[i]), format = 'string')
}
View(bg)
bg_proteins <- bg$up_id
getwd()
write.table(bg, file = "file_temp.map", quote = FALSE,
sep = "\t", row.names = FALSE, col.names = FALSE)
bg2GO <- topGO::readMappings(file = 'file_temp.map')
bg_proteins <- names(bg2GO)
file.remove("file_temp.map")
## ------- Compare sample vs bg_proteins
# It is essential that the items in the 'sample' vector
# correspond to items within the background ie 'bg_proteins'
compared_proteins <- factor(as.integer(bg_proteins %in% sample))
names(compared_proteins) <- bg_proteins
## ------- Create topGO object
GOdata <- new("topGOdata", ontology = aspect, allGenes = compared_proteins,
annot = annFUN.gene2GO, gene2GO = bg2GO)
save(bg, file = './bg.Rda')
aspect = 'BP'
## ------- Create topGO object
GOdata <- new("topGOdata", ontology = aspect, allGenes = compared_proteins,
annot = annFUN.gene2GO, gene2GO = bg2GO)
library(topGO)
## ------- Create topGO object
GOdata <- new("topGOdata", ontology = aspect, allGenes = compared_proteins,
annot = annFUN.gene2GO, gene2GO = bg2GO)
## ------- Run Fisher test
resultFisher <- topGO::runTest(GOdata, algorithm = "classic", statistic = "fisher")
n = 20
## --- Create table with enrichment result
output <- topGO::GenTable(GOdata, classicFisher = resultFisher, topNodes = n)
output <- as.data.frame(output)
View(output)
a <- gorilla(target = './go/GOvivo.txt')
devtools::load_all(".")
a <- gorilla(target = './go/GOvivo.txt')
getwd()
setwd("./test/testthat")
setwd("./tests/testthat")
a <- gorilla(target = './go/GOvivo.txt')
expect_is(a, 'data.frame')
expect_gt(nrow(a), 100)
expect_gt(ncol(a), 8)
b <- gorilla(target = './go/GOvivo.txt', db = 'all')
expect_is(b, 'list')
expect_equal(length(b), 3)
expect_is(b[[1]], 'data.frame')
expect_gt(nrow(b[[1]]), 10)
expect_equal(ncol(b[[1]]), 10)
expect_is(b[[2]], 'data.frame')
expect_gt(nrow(b[[2]]), 10)
expect_equal(ncol(b[[2]]), 10)
expect_is(b[[3]], 'data.frame')
expect_gt(nrow(b[[3]]), 10)
expect_equal(ncol(b[[3]]), 10)
c <- gorilla(target = './go/GOvivo.txt',
background = './go/GObackground.txt',
mode = 'hg')
expect_is(c, 'data.frame')
expect_gt(nrow(c), 100)
expect_gt(ncol(c), 8)
d <- gorilla(target = './go/GOvivo.txt',
background = './go/GObackground.txt',
db = 'func', mode = 'hg')
expect_is(c, 'data.frame')
expect_gt(nrow(c), 100)
expect_gt(ncol(c), 8)
expect_is(d, 'data.frame')
expect_gt(nrow(d), 100)
expect_gt(nrow(d), 50)
expect_gt(ncol(d), 8)
e <- gorilla(target = './go/GOvivo.txt',
background = './go/GObackground.txt',
db = 'comp', mode = 'hg')
expect_is(e, 'data.frame')
expect_gt(nrow(e), 100)
expect_gt(ncol(e), 8)
f <- gorilla(target = './go/GOvivo.txt',
background = './go/GObackground.txt',
db = 'all', mode = 'hg')
expect_is(f, 'list')
expect_equal(length(f), 3)
expect_is(f[[1]], 'data.frame')
expect_gt(nrow(f[[1]]), 10)
expect_equal(ncol(f[[1]]), 10)
expect_is(f[[2]], 'data.frame')
expect_gt(nrow(f[[2]]), 10)
expect_equal(ncol(f[[2]]), 10)
expect_is(f[[3]], 'data.frame')
expect_gt(nrow(f[[3]]), 10)
expect_equal(ncol(f[[3]]), 10)
?get.seq
rm(list = ls())
a <- background.go(ids = "./go/id_set.txt")
b <-  background.go(ids = c("Q13015", "Q14667", "P08575", "Q5JSZ5", "P13196", "H7C4H7"))
expect_is(a, 'data.frame')
expect_equal(nrow(a), 6)
expect_equal(ncol(a), 2)
expect_is(b, 'data.frame')
expect_equal(nrow(b), 6)
expect_equal(ncol(b), 2)
expect_equal(a, b)
a
b
View(a)
View(b)
View(a)
View(b)
View(a)
devtools::load_all("~/ptm_outdropbox/ptm/Rptm")
library(ptm)
library(ptm)
library(devtools)
devtools::check_win_devel(pkg = ".",
args = NULL,
manual = TRUE,
email = NULL,
quiet = FALSE)
?read.csv
?read.delim
devtools::run_examples(pkg = ".",
start = NULL,
run_dontrun = FALSE,
run_donttest = FALSE,
document = TRUE)
devtools::run_examples(pkg = ".",
start = NULL,
run_dontrun = FALSE,
run_donttest = FALSE,
document = TRUE)
devtools::load_all("~/ptm_outdropbox/ptm/Rptm")
devtools::load_all(".")
>>>>>>> cd82bba62dc029a14e3cba4d8e69d8e2c0b79653
getwd()
a <- ptm.plot('P01009', property = 'sasa', ptm = 'p')
devtools::load_all(".")
a <- ptm.plot('P01009', property = 'sasa', ptm = 'p')
a <- ptm.plot('P01009', property = 'dpx', ptm = 'meto')
rm(a)
a <- ptm.plot("Q01196", property = 'sasa', ptm = 'p',
dssp = 'compute', window = 1, sdata = TRUE)
rm(a)
a <- ptm.plot("Q01196", property = 'sasa', ptm = 'p',
dssp = 'compute', window = 1, sdata = FALSE)
a <- ptm.plot("Q01196", property = 'sasa', ptm = 'p',
dssp = 'compute', window = 1, sdata = FALSE)
b <- ptm.plot("Q01196", pdb = "1H9D.C", property = 'acc', ptm = 'p',
dssp = 'compute', window = 1, sdata = TRUE)
c <- suppressWarnings(ptm.plot('G3SB67', property = 'eiip', window = 10, ptm = 'all'))
d <- ptm.plot('P23246', property = 'acc', ptm = 'all')
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(ptm)
data <- meto.search(organism = 'Homo sapiens', oxidant = 'H2O2')
View(data)
set.seed(123)
data <- data[sample(1:nrow(data), 50, replace = FALSE), 1:4]
head(data)
?ptm.plot
a <- ptm.plot("P04406", pdb = '1u8f', property = 'acc')
a <- ptm.plot("P04406", property = 'acc')
a <- ptm.plot("P04406", property = 'acc', ptm = c('p', 'meto'))
b <- ptm.plot("P04406", property = 'acc', ptm = 'reg')
?find.aaindex
?find.aaindex
find.aaindex("mutability")
find.aaindex("synthesis")
find.aaindex("energy")
find.aaindex("reactivity")
find.aaindex("conservation")
find.aaindex("expensive")
find.aaindex("Polarizability")
?ptm.plot
knitr::opts_chunk$set(echo = TRUE)
library(ptm)
ptm.plot(up_id = "P04406", property = 'entropy7.aa', ptm = 'meto')
getwd()
ptm.plot(up_id = "P04406", property = 'entropy7.aa', ptm = 'meto')
ptm.plot(up_id = "P04406", property = 'mutability', ptm = 'meto')
ptm.plot(up_id = "P04406", property = 'polarizability', ptm = 'meto')
ptm.plot(up_id = "P04406", property = 'polarizability', ptm = 'meto')
ptm.plot(up_id = "P04406", property = 'mutability', ptm = 'meto')
?entropy
?shannon
load("/Users/JCA/ptm_outdropbox/ptm/Rptm/plotptm_cache/sse_1u8f.Rda")
View(sse)
id.mapping("P04406", 'uniprot, 'kegg'')
id.mapping("P04406", 'uniprot', 'kegg')
shannon(id.mapping("P04406", 'uniprot', 'kegg'), 'vertebrate') -> a
shannon(id.mapping("P04406", 'uniprot', 'kegg'), 'vertebrate') -> a
id.mapping("P04406", 'uniprot', 'kegg')
shannon('hsa:2597', 'vertebrate') -> a
a <- shannon('hsa:4069', species = 'vertebrates', base = 2, alphabet = 21)
b <- shannon('hsa:2597', species = 'vertebrates', base = 2, alphabet = 21)
c <- shannon('hsa:2597', species = 'vertebrates')
shannon(id.mapping("P04406", 'uniprot', 'kegg'), 'vertebrates') -> d
View(d)
View(sse)
View(d)
View(d)
View(d)
devtools::load_all(".")
ptm.plot(up_id = "P04406", property = 'entropy7.aa', ptm = 'meto')
knitr::opts_chunk$set(echo = TRUE)
library(ptm)
library(knitr)
k <- id.mapping("P04406", from = 'uniprot', to = 'kegg')
S <- shannon(target = k, species = "seven")
k <- id.mapping("P04406", from = 'uniprot', to = 'kegg')
S <- shannon(target = k, species = "vertebrates")
closeAllConnections()
k <- id.mapping("P04406", from = 'uniprot', to = 'kegg')
S <- shannon(target = k, species = "vertebrates")
View(S)
View(S)
S <- shannon(target = k, species = "vertebrates", base = 21)
View(data)
View(S)
View(S)
ptm.plot(up_id = "P04406", property = 'entropy7.aa', ptm = 'meto', window = 5)
ptm.plot(up_id = "P04406", property = 'entropy7.aa', ptm = 'meto', window = 50)
ptm.plot(up_id = "P04406", property = 'entropy7.aa', ptm = 'meto', window = 40)
ptm.plot(up_id = "P04406", property = 'argos', ptm = 'meto')
ptm.plot(up_id = "P04406", property = 'avg.hyd', ptm = 'meto')
devtools::load_all(".")
ptm.plot(up_id = "P04406", property = 'argos', ptm = 'meto')
ptm.plot(up_id = "P04406", property = 'avg.hyd', ptm = 'meto')
ptm.plot(up_id = "P04406", property = 'argos', ptm = 'meto')
ptm.plot(up_id = "P04406", property = 'avg.hyd', ptm = 'meto')
ptm.plot(up_id = "P04406", property = 'avg.hyd', ptm = 'meto', window = 5)
ptm.plot(up_id = "P04406", property = 'entropy7.aa', ptm = 'meto', window = 25)
ptm.plot(up_id = "P04406", property = 'argos', ptm = 'meto')
ptm.plot(up_id = "P04406", property = 'avg.hyd', ptm = 'meto')
ptm.plot(up_id = "P04406", property = 'avg.hyd', ptm = 'meto', window = 5)
ptm.plot(up_id = "P04406", property = 'avg.hyd', ptm = 'p', window = 5)
ptm.plot(up_id = "P04406", property = 'argos', ptm = 'meto')
ptm.plot(up_id = "P04406", property = 'avg.hyd', ptm = 'meto')
ptm.plot(up_id = "P04406", property = 'avg.hyd', ptm = 'meto', window = 5)
ptm.plot(up_id = "P04406", property = 'avg.hyd', ptm = 'p', window = 5)
ptm.plot(up_id = "P04406", property = 'avg.hyd', ptm = 'reg', window = 5)
ptm.plot(up_id = "P04406", property = 'avg.hyd', ptm = 'meto')
