for (i in 1:nrow(output)){
if (!is.na(output$codon[i])){
t <- as.character(output$codon[i])
if (!laxity){
if (output$aa[i] != names(triplet)[which(triplet == t)]){
stop(paste("Problem at ", i))
}
}
output$check[i] <- (output$aa[i] == names(triplet)[which(triplet == t)])
}
}
if (!laxity){
if (sum(output$check) != nrow(output)) { stop("Translation problem")}
}
View(output)
rm(list = ls())
library(ptm)
stringi::stri_escape_unicode(*)
stringi::stri_escape_unicode("*")
cat(stringi::stri_escape_unicode("*"))
x <- "this is a bullet *"
y <- "this is a bullet \u2022"
x
y
x <- "this is a bullet •"
x == y
?stri_escape_unicode
rm(x,y)
x <- "this is *"
x
cat(stringi::stri_escape_unicode(x))
cat(stringi::stri_escape_unicode(x))
x <- "this is a bullet •"
x
cat(stringi::stri_escape_unicode(x))
x <- @
x <- '@'
x
cat(stringi::stri_escape_unicode(x))
x <- '•'
x
cat(stringi::stri_escape_unicode(x))
4*7
?tools::showNonASCII()
tools::showNonASCIIfile("/Users/juancarlosaledo/ptm_outdropbox/ptm/Rptm/R/ddG.R")
x <- "Temperature has been set to 25ºC"
x
cat(stringi::stri_escape_unicode(x))
war <- "Temperature has been set to 25\u00baC"
war
cat(stringi::stri_escape_unicode("ΔΔG"))
?ddG.ptm
?ddG.ptm
devtools::load_all(".")
library(ptm)
1/310
273+30
1/303
Ea <- 50
Te <- 298
Ea <- 50
0.00831 * Te -> RT
273+35
Te <- 308
0.00831 * Te -> RT
Te <- 298
Ea <- 50
0.00831 * Te -> RT
H <- 50 - RT
Te <- 308
0.00831 * Te -> RT
H <- 50 - RT
Te <- 298
Ea <- 100
0.00831 * Te -> RT
H <- 50 - RT
Te <- 308
Ea <- 100
0.00831 * Te -> RT
H <- 50 - RT
Ea <- 100
0.00831 * Te -> RT
H <- Ea - RT
Te <- 298
Ea <- 100
0.00831 * Te -> RT
H <- Ea - RT
rm(list =ls())
install.packages("topGO")
BiocManager::install("topGO")
library(ptm)
knitr::opts_chunk$set(echo = TRUE)
library(ptm)
library(knitr)
all <- meto.search(organism = 'Homo sapiens',
oxidant = 'hydrogen peroxide')
vivo <- unique(all$prot_id[which(all$met_vivo_vitro == 'vivo')])
bg <- unique(all$prot_id)
filevivo <- tempfile(pattern = 'vivo', fileext = '.txt')
for (i in 1:length(vivo)){
cat(vivo[i], "\n", file = filevivo, append = TRUE)
}
filebg <- tempfile(pattern = 'bg', fileext = '.txt')
for (i in 1:length(bg)){
cat(bg[i], "\n", file = filebg, append = TRUE)
}
vv <- go.enrich(s_file = filevivo, bg_file = filebg, aspect = 'BP', n = 20)
aspect = 'BP'
n = 20
s_file <- filevivo
## ----- The sample to be analyzed
sample <- read.csv(s_file, header = FALSE)
View(sample)
sample <- sample$V1 # as factor values array
sample
## ----- Geting GO ids for the backgraound set
bg <- read.csv(bg_file, header = FALSE)
bg_file <- filebg
## ----- Geting GO ids for the backgraound set
bg <- read.csv(bg_file, header = FALSE)
names(bg) <- 'up_id'
bg
bg$GO_id <- NA
for (i in 1:nrow(bg)){
bg$GO_id[i] <- get.go(bg$up_id[i], format = 'string')
}
i
bg$up_id[i]
get.go(bg$up_id[i], format = 'string')
View(bg)
str(bg$up_id)
bg[1]
bg$up_id[1]
i
get.go(as.character(bg$up_id[i]), format = 'string')
get.go('P01009', format = 'string')
rm(list = ls())
filevivo
all <- meto.search(organism = 'Homo sapiens',
oxidant = 'hydrogen peroxide')
bg <- unique(all$prot_id)
names(bg) <- 'up_id'
bg$GO_id <- NA
getwd()
bg <- unique(all$prot_id)
for (i in 1:length(bg)){
cat(bg[i], "\n", file = '/Users/JCA/ptm_outdropbox/ptm/htdocs/Rmd/go/GObackground.txt', append = TRUE)
}
vv <- go.enrich(s_file = filevivo, bg_file = filebg, aspect = 'BP', n = 20)
for (i in 1:length(bg)){
cat(bg[i], "\n", file = '/Users/JCA/ptm_outdropbox/ptm/htdocs/Rmd/go/GObackground.txt', append = TRUE)
}
# vv <- go.enrich(s_file = filevivo, bg_file = filebg, aspect = 'BP', n = 20)
bg_file <- '/Users/JCA/ptm_outdropbox/ptm/htdocs/Rmd/go/GObackground.txt'
## ----- Geting GO ids for the backgraound set
bg <- read.csv(bg_file, header = FALSE)
View(bg)
View(bg)
View(bg)
rm(bg)
for (i in 1:length(bg)){
cat(bg[i], "\n", file = '/Users/JCA/ptm_outdropbox/ptm/htdocs/Rmd/go/GObackground.txt', append = TRUE)
}
b <- unique(all$prot_id)
for (i in 1:length(b)){
cat(b[i], "\n", file = '/Users/JCA/ptm_outdropbox/ptm/htdocs/Rmd/go/GObackground.txt', append = TRUE)
}
library(ptm)
knitr::opts_chunk$set(echo = TRUE)
library(ptm)
library(knitr)
all <- meto.search(organism = 'Homo sapiens',
oxidant = 'hydrogen peroxide')
b <- unique(all$prot_id)
for (i in 1:length(b)){
cat(b[i], "\n", file = '/Users/JCA/ptm_outdropbox/ptm/htdocs/Rmd/go/GObackground.txt', append = TRUE)
}
# vv <- go.enrich(s_file = filevivo, bg_file = filebg, aspect = 'BP', n = 20)
## ----- Geting GO ids for the backgraound set
bg <- read.csv(bg_file, header = FALSE)
bg_file <- '/Users/JCA/ptm_outdropbox/ptm/htdocs/Rmd/go/GObackground.txt'
## ----- Geting GO ids for the backgraound set
bg <- read.csv(bg_file, header = FALSE)
names(bg) <- 'up_id'
View(bg)
bg$GO_id <- NA
for (i in 1:nrow(bg)){
bg$GO_id[i] <- get.go(bg$up_id[i], format = 'string')
}
i
get.go(bg$up_id[i], format = 'string')
bg$up_id[i]
as.character(bg$up_id[i])
get.go(as.character(bg$up_id[i]), format = 'string')
bg$GO_id[i] <- get.go(bg$up_id[i], format = 'string')
as.character(bg$up_id[i])
bg$GO_id[i] <- get.go("P01009", format = 'string')
as.character(bg$up_id[i])
?trimws
for (i in 1:length(b)){
cat(trimws(b[i]), "\n", file = '/Users/JCA/ptm_outdropbox/ptm/htdocs/Rmd/go/GObackground.txt', append = TRUE)
}
## ----- Geting GO ids for the backgraound set
bg <- read.csv(bg_file, header = FALSE)
names(bg) <- 'up_id'
bg$GO_id <- NA
for (i in 1:nrow(bg)){
bg$GO_id[i] <- get.go(bg$up_id[i], format = 'string')
}
bg$up_id[i]
as.character(bg$up_id[i])
trimws(as.character(bg$up_id[i])))
trimws(as.character(bg$up_id[i]))
trimws(bg$up_id[i])
get.go(trimws(bg$up_id[i]), format = 'string')
rm(bg)
## ----- Geting GO ids for the backgraound set
bg <- read.csv(bg_file, header = FALSE)
names(bg) <- 'up_id'
bg$GO_id <- NA
for (i in 1:nrow(bg)){
bg$GO_id[i] <- get.go(trimws(bg$up_id[i]), format = 'string')
}
View(bg)
i
a <- get.go(trimws(bg$up_id[i]), format = 'string')
e <- get.go(id = 'P00367')
id <- 'P00367'
filter = FALSE
format = 'dataframe'
silent = FALSE
if (!silent){
print(paste("Getting GO terms for ", id, sep = ""))
}
## ------------------------- Subfunction for complet list ---------------------- ##
complet.list <- function(id){
requestURL <- paste("https://www.ebi.ac.uk/QuickGO/services/annotation/",
"downloadSearch?includeFields=goName&selectedFields=symbol&geneProductId=",
id, sep = "")
r <- httr::GET(requestURL, httr::accept("text/gpad"))
httr::stop_for_status(r)
content <- httr::content(r,as = "text")
a <- strsplit(content, split = "\n")[[1]]
lines <- a[10:length(a)]
output <- as.data.frame(matrix(rep(NA, length(lines)*8), ncol = 8))
names(output) <- c('gene_product', 'qualifier', 'GO_id', 'evidence', 'evidence_code',
'reference', 'assigned_by', 'date')
for (i in seq_len(length(lines))){
t <- strsplit(lines[i], split = "\t")[[1]]
output$gene_product[i] <- t[2]
output$qualifier[i] <- t[3]
output$GO_id[i] <- t[4]
output$evidence[i] <- t[6]
output$evidence_code[i] <- strsplit(t[12], split = "=")[[1]][2]
output$reference[i] <- t[5]
output$assigned_by[i] <- t[10]
output$date[i] <- t[9]
}
return(output)
}
## ------- Building the output dataframe ----------------- ##
if (filter){
output <- filtered.list(id)
} else {
output <- complet.list(id)
}
View(output)
string
format
outp <- paste(output$GO_id, collapse = ", ")
outp
e <- get.go(id = 'P00367')
View(output)
baseURL <- 'https://www.uniprot.org/uniprot/?query='
requestURL <- paste(baseURL, id, '&format=tab&columns=id%2Cgo', sep = "")
resp <- .get.url(requestURL)
cont <- httr::content(resp, 'text')
?.get.url
library(ptm)
resp <- .get.url(requestURL)
cont$isObsolete
exists(filter)
exists('filter')
library(ptm)
a <- get.go(id = "P01009")
e <- get.go(id = 'P00367')
View(a)
View(a)
library(ptm)
View(a)
rm(a)
a <- get.go(id = "P01009")
View(a)
names(a)
library(ptm)
rm(a)
a <- get.go(id = "P01009")
View(a)
e <- get.go(id = 'P00367')
View(a)
rm(a)
library(ptm)
a <- get.go(id = "P01009")
View(a)
e <- get.go(id = 'P00367')
View(e)
rm(a,e)
library(ptm)
a <- get.go(id = "P01009")
View(a)
View(a)
library(ptm)
rm(a)
a <- get.go(id = "P01009")
View(a)
e <- get.go(id = 'P00367')
View(e)
b <- get.go(id = 'P01009', filter = FALSE)
View(b)
ee <- get.go(id = 'P00367', filter = FALSE)
View(ee)
View(e)
ee <- get.go(id = 'P00367', format = 'string')
ee
View(e)
e$GO_id[1]
str(e$GO_id[1])
substr(e$GO_id[1], 1,2)
substr(e$GO_id[1], 1,2) == 'GO'
ee <- e
ee <- e[which(substr(e$GO_id, 1,2) == "GO"), ]
View(ee)
rm(list =ls())
library(ptm)
a <- get.go(id = "P01009")
b <- get.go(id = 'P01009', filter = FALSE)
c <- get.go(id = 'P04406', format = 'string')
d <- get.go(id = 'P04406', filter = FALSE, format = 'string')
e <- get.go(id = 'P00367')
View(e)
expect_is(e, 'data.frame')
library(testthat)
expect_is(a, 'data.frame')
expect_gte(nrow(a), 25)
expect_equal(ncol(a), 5)
expect_is(b, 'data.frame')
expect_gte(nrow(b), 76)
expect_equal(ncol(b), 8)
expect_is(c, 'character')
expect_gte(nchar(c), 460)
expect_is('d', "character")
expect_gte(nchar(d), 1100)
expect_is(e, 'data.frame')
expect_gte(nrow(a), 15)
expect_equal(ncol(a), 5)
rm(a,b,c,d,e)
bg_file <- '/Users/JCA/ptm_outdropbox/ptm/htdocs/Rmd/go/GObackground.txt'
s_file <- '/Users/JCA/ptm_outdropbox/ptm/htdocs/Rmd/go/GOvivo.txt'
aspect = 'BP'
n = 20
## ----- The sample to be analyzed
sample <- read.csv(s_file, header = FALSE)
View(sample)
View(sample)
str(sample$V1)
sample <- sample$V1 # as factor values array
## ----- Geting GO ids for the backgraound set
bg <- read.csv(bg_file, header = FALSE)
names(bg) <- 'up_id'
bg$GO_id <- NA
for (i in 1:nrow(bg)){
print(i)
bg$GO_id[i] <- get.go(trimws(bg$up_id[i]), format = 'string')
}
for (i in 1:nrow(bg)){
print(i)
bg$GO_id[i] <- get.go(trimws(bg$up_id[i]), format = 'string')
}
bg$up_id[i]
trimws(bg$up_id[i]
)
get.go(trimws(bg$up_id[i]), format = 'string')
s_file
## ----- The sample to be analyzed
sample <- read.csv(s_file, header = FALSE)
View(sample)
str(sample)
is.data.frame(sample)
is.array(sample)
s <- sample[,1]
is.array(s)
s
str(s)
is.vector(s)
is.factor(s)
s <- ('a', 2, 'bc')
s <- c('a', 2, 'bc')
s
is.array(s)
is.character(s)
length(s)
"/es/unpaht/to" -> p
length(p)
is.data.frame(sample)
"o" %in% "hola"
gregexpr("o", "hola")[[1]]
rm(list = ls())
target <- '/Users/JCA/ptm_outdropbox/ptm/htdocs/Rmd/go/GOvivo.txt'
background <- '/Users/JCA/ptm_outdropbox/ptm/htdocs/Rmd/go/GObackground.txt'
is.character(target)
length(target) == 1
## ----- The sample to be analyzed
if (is.character(target) & length(target) == 1){ # path to the sample txt
if (gregexpr('txt', target)[[1]] != -1){
sample <- read.csv(target, header = FALSE)
sample <- as.character(sample$V1)
} else {
stop("A proper path to a txt file should be provided for the target set")
}
} else if (is.character(target) & length(target) > 1){
sample <- as.character(target)
} else if (is.data.frame(target) & nrow(target) > 1){
sample <- as.character(target)
} else {
stop("A proper target set must be provided")
}
## ----- The background set
if (is.character(background) & length(background) == 1){ # path to the background txt
if (gregexpr('txt', background)[[1]] != -1){
bg <- read.csv(background, header = FALSE)
bg <- as.character(bg$V1)
} else {
stop("A proper path to a txt file should be provided for the background set")
}
} else if (is.character(background) & length(background) > 1){
bg <- as.character(background)
} else if (is.data.frame(background) & nrow(background) > 1){
bg <- as.character(background)
} else {
stop("A proper background set must be provided")
}
## ----- Check that the target is included into the background set
intersect(sample, bg) == sample
intersect(sample, bg)
## ----- Check that the target is included into the background set
sample_bg <- intersect(sample, bg)
str(sample)
str(bg)
sample %in% bg
?intersect
is.vector(1:10)
is.vector(c('a', 'b'))
is.vector(1)
## ----- Check that the target is included into the background set
sample_bg <- intersect(sample, bg)
sample_bg
setdiff(bg, sample) -> d
sample[1]
sample[1] %in% bg
"P01009" %in% sample
"P01009 " %in% sample
sample[1]
bg[1]
?trimsw
?trimws
knitr::opts_chunk$set(echo = TRUE)
library(ptm)
library(knitr)
all <- meto.search(organism = 'Homo sapiens',
oxidant = 'hydrogen peroxide')
vivo <- unique(all$prot_id[which(all$met_vivo_vitro == 'vivo')])
bg <- unique(all$prot_id)
target <- vivo
background <- bg
is.character(target) & length(target) == 1
is.character(target) & length(target) > 1
## ----- The sample to be analyzed
if (is.character(target) & length(target) == 1){ # input as path to the txt
if (gregexpr('txt', target)[[1]] != -1){
sample <- read.csv(target, header = FALSE)
sample <- trimws(as.character(sample$V1))
} else {
stop("A proper path to a txt file should be provided for the target set")
}
} else if (is.character(target) & length(target) > 1){ # input as vector
sample <- trimws(as.character(target))
} else if (is.data.frame(target) & nrow(target) > 1){ # input as dataframe
sample <- trimws(as.character(target))
} else {
stop("A proper target set must be provided")
}
## ----- The background set
if (is.character(background) & length(background) == 1){ # input as path to the txt
if (gregexpr('txt', background)[[1]] != -1){
bg <- read.csv(background, header = FALSE)
bg <- trimws(as.character(bg$V1))
} else {
stop("A proper path to a txt file should be provided for the background set")
}
} else if (is.character(background) & length(background) > 1){ # input as vector
bg <- as.character(background)
} else if (is.data.frame(background) & nrow(background) > 1){ # input as dataframe
bg <- trimws(as.character(background))
} else {
stop("A proper background set must be provided")
}
## ----- Check that the target is included into the background set
sample_bg <- intersect(sample, bg)
sample_bg == sample
sum(sample_bg == sample)
## ----- Check that the target is included into the background set
sample_bg <- intersect(sample, bg)
