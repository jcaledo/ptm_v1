<<<<<<< HEAD
1,1,1,1,1,0,
1,1,1,1,1,1), ncol = 6, byrow = TRUE)
reg_id <- prodlim::row.match(merge, as.data.frame(fc))
attr(reg_id, 'effect') <- merge
return(reg_id)
}
## ------------------------------------ Input ------------------------- ##
species <- 'Mus musculus'
tissue <- 'NULL'
oxidant <- 'mical-catalyzed'
release <- 'January_2021'
met_pos <- 308 # position of MetO in the primary structure
met_vivo_vitro <- 'both'
met_ext <- NA
prot_id <- 'Q6PHZ2'
reg_id <- 18
direct <- TRUE
label <- "Regulatory_January_2021"
met_ext <- 'NULL' # oxidation extension
prot_note <- "The sulfoxidation of M281 and M282 activates the kinase in a Ca/CaM-independent fashion. MsrB and Mical1 control the stereospecific redox status of M308, a highly conserved residue in the CaM-binding domain of CaMKII. Oxidized M308 decreased CaM binding and CaMKII activity. In the 6BAB PDB the Met labeling can be different to the one used herein."
ref <- "10.1172/JCI133181"
pmid <- "32749237"
character <- 1
title <- "MICAL1 constrains cardiac stress responses and protects against disease by oxidizing CaMKII."
href <- "https://www.ncbi.nlm.nih.gov/pubmed/32749237"
prot_name <- ''
prot_nickname <- 'NULL'
gene_name <- 'NULL'
prot_pdb <- 'NULL'
prot_sub <- 'NULL'
ptm_db < 'PSP'  # 'PhosPhAt'
domain <- ''
ptm_db <- 'PSP'  # 'PhosPhAt'
domain <- ''
kingdom <- ''
phylum <- ''
class <- ''
order <- ''
family <- ''
genus <- ''
library(ptm)
## ------------------------------------------------------------------------ ##
## --------- Check whether the MetO site is already in the DB ------------- ##
## ------------------------------------------------------------------------ ##
load("./W_Deprecated_Tables/Methionine.Rda")
load("./W_Deprecated_Tables/Organism.Rda")
ctr <- paste(prot_id, met_pos, sep = "-")
t <- Methionine[which(Methionine$ctr == ctr), ]
if (nrow(t) == 1){ # The site already exists
met_id <- t$met_id
old_org_id <- as.numeric(t$org_id)
old_tissue <- Organism$org_tissue[which(Organism$org_id == old_org_id)]
old_oxidant <- Organism$org_oxidant[which(Organism$org_id == old_org_id)]
old_reg_id <- t$reg_id
## ----- Same tissue (St)?
old_tissue <- trimws(old_tissue)
if (old_tissue == tissue){
St <- TRUE
} else if (gregexpr(tissue, old_tissue)[[1]] != -1) {
tissue <- old_tissue
St <- TRUE
} else {
St <- FALSE
if (tissue == 'NULL'){
tissue <- old_tissue
} else if (old_tissue != 'NULL'){
tissue <- paste(old_tissue, tissue, sep = '+')
}
}
## ----- Same oxidant (So)?
old_oxidant <- trimws(old_oxidant)
if (old_oxidant == oxidant){
So <- TRUE
} else if (gregexpr(oxidant, old_oxidant)[[1]] != -1){
oxidant <- old_oxidant
So <- TRUE
} else {
So <- FALSE
oxidant <- paste(old_oxidant, oxidant, sep = ", ")
}
## ----- Same reg_id (Sr)?
if (old_reg_id == reg_id){
Sr <- TRUE
} else {
Sr <- FALSE
reg_id <- merge.regid(c(old_reg_id, reg_id))
}
if (sum(St, So, Sr) == 3){
stop("This entry already exists in MetOSite!")
}
## --- When the MetO site exists but tissue, oxidant and/or reg_id
## --- need to be updated:
n_sites_same_org_id <- length(Methionine$org_id[which(Methionine$org_id == old_org_id)])
if (n_sites_same_org_id == 1){ # change old org_id
Organism$org_tissue[old_org_id] <- tissue
Organism$org_oxidant[old_org_id] <- oxidant
org_id <- old_org_id
save(Organism, file = "./Organism.Rda")
} else if (n_sites_same_org_id > 1) { # create new org_id
Organism[nrow(Organism) + 1, ] <- NA
org_id <- nrow(Organism)
Organism$org_id[org_id] <- org_id
Organism$org_sp[org_id] <- species
Organism$org_tissue[org_id] <- tissue
Organism$org_oxidant[org_id] <- oxidant
Organism$release[org_id] <- release
save(Organism, file = "./Organism.Rda")
} else {
stop("Something went awfully wrong!")
}
} else if (nrow(t) >1){
stop("This entry shouldn't be repeated!")
} else if (nrow(t) == 0){ ## ------------------------------ Bona fide new entry
## ------------------------------------------------------------------------ ##
## --------------------------- Organism Table ----------------------------- ##
## -- If the 'organism' entry doesn't already exist, add it to the table -- ##
o <- Organism[which(Organism$org_sp == species), ]
o <- o[which(o$org_oxidant == oxidant), ]
o <- o[which(o$org_tissue == tissue), ]
if (nrow(o) == 0){
org_id <- nrow(Organism) + 1
Organism[org_id, ] <- NA
Organism$org_id[org_id] <- org_id
Organism$org_sp[org_id] <- species
Organism$org_tissue[org_id] <- tissue
Organism$org_oxidant[org_id] <- oxidant
Organism$release[org_id] <- release
save(Organism, file = "./Organism.Rda")
} else if (nrow(o) == 1){
org_id <- o$org_id
} else {
stop("Repeated organism entries!")
}
## ------------------------------------------------------------------------ ##
## ----------------------------- Taxon Table ------------------------------ ##
## --- If the 'taxon' entry doesn't already exist, add it to the table ---- ##
load("./W_Deprecated_Tables/Taxon.Rda")
if (! species %in% Taxon$org_sp){
Taxon[nrow(Taxon) + 1, ] <- NA
Taxon$org_sp[nrow(Taxon) + 1] <- species
Taxon$domain[nrow(Taxon) + 1] <- domain
Taxon$kingdom[nrow(Taxon) + 1] <- kingdom
Taxon$phylum[nrow(Taxon) + 1] <- phylum
Taxon$class[nrow(Taxon) + 1] <- class
Taxon$order[nrow(Taxon) + 1] <- order
Taxon$family[nrow(Taxon) + 1]  <- family
Taxon$genus[nrow(Taxon) + 1] <- genus
save(Taxon, file = "./Taxon.Rda")
}
## ------------------------------------------------------------------------ ##
## ------------------------ Methionine Table ------------------------------ ##
## ------------------------------------------------------------------------ ##
met_id <- nrow(Methionine) + 1
Methionine[met_id, ] <- NA
Methionine$met_id[met_id] <- met_id
Methionine$met_pos[met_id] <- met_pos
Methionine$met_ext[met_id] <- met_ext
Methionine$met_vivo_vitro[met_id] <- met_vivo_vitro
Methionine$prot_id[met_id] <- prot_id
Methionine$reg_id[met_id] <- reg_id
Methionine$label[met_id] <- label
Methionine$release[met_id] <- release
Methionine$ctr[met_id] <- ctr
Methionine$direct[met_id] <- direct
Methionine$note[met_id] <- note
save(Methionine, file = "./Methionine.Rda")
## ------------------------------------------------------------------------ ##
## -------------------------- Protein Table ------------------------------- ##
## ------------------------------------------------------------------------ ##
load("./W_Deprecated_Tables/Protein.Rda")
t <- Protein[which(Protein$prot_id == prot_id), ]
if (nrow(t) > 1){
stop("Protein entry shoudn't be repeated")
} else if (nrow(t) == 1){
Protein$prot_note[which(Protein$prot_id == prot_id)] <- prot_note
Protein$label[which(Protein$prot_id == prot_id)] <- label
Protein$release[which(Protein$prot_id == prot_id)] <- release
save(Protein, file = "./Protein.Rda")
} else if (nrow(t) == 0){
Protein[nrow(Protein) + 1, ] <- NA
Protein$prot_id[nrow(Protein)] <- nrow(Protein)
Protein$prot_name[nrow(Protein)] <- prot_name
Protein$prot_nickname[nrow(Protein)] <- prot_nickname
Protein$gene_name[nrow(Protein)] <- gene_name
Protein$prot_seq[nrow(Protein)] <- ptm::get.seq(prot_id)
Protein$prot_pdb[nrow(Protein)] <- prot_pdb
Protein$prot_sub[nrow(Protein)] <- prot_sub
Protein$prot_note[nrow(Protein)] <- prot_note
Protein$prot_sp[nrow(Protein)] <- species
Protein$label[nrow(Protein)] <- label
Protein$release[nrow(Protein)] <- release
save(Protein, file = "./Protein")
}
## ------------------------------------------------------------------------ ##
## ------------------------------ PTM Tables ------------------------------ ##
## ------------------------------------------------------------------------ ##
## -------------------- Building Phosphorylation Table -------------------- ##
load("./W_Deprecated_Tables/Phosphorylation.Rda")
counter <- nrow(Phosphorylation) + 1
t <- ptm::p.scan(prot_id, ptm_db)
if (is.null(nrow(t))){
new <- c(counter, prot_id, 'Any', label, release, paste(prot_id, 'Any', sep = "-"))
Phosphorylation[counter, ] <- new
} else if (nrow(t) == 0){
new <- c(counter, prot_id, 'Any', label, release, paste(prot_id, 'Any', sep = "-"))
Phosphorylation[counter, ] <- new
} else if (nrow(t) > 0){
for (j in 1:nrow(t)){
new <- c(counter, t$up_id[j], t$modification[j], label, release,
paste(prot_id, t$modification[j], sep = "-"))
Phosphorylation[counter, ] <- new
counter <- counter + 1
}
}
closeAllConnections()
save(Phosphorylation, file = "./Phosphorylation.Rda")
## ------------------------- Building Acetylation Table ----------------------- ##
load("./W_Deprecated_Tables/Acetylation.Rda")
counter <- nrow(Acetylation) + 1
t <- ptm::ac.scan(prot_id, ptm_db)
if (is.null(nrow(t))){
new <- c(counter, prot_id, 'Any', label, release, paste(prot_id, 'Any', sep = "-"))
Acetylation[counter, ] <- new
} else if (nrow(t) == 0){
new <- c(counter, prot_id, 'Any', label, release, paste(prot_id, 'Any', sep = "-"))
Acetylation[counter, ] <- new
} else if (nrow(t) > 0){
for (j in 1:nrow(t)){
new <- c(counter, t$up_id[j], t$modification[j], label, release,
paste(prot_id, t$modification[j], sep = "-"))
Acetylation[counter, ] <- new
counter <- counter + 1
}
}
closeAllConnections()
save(Acetylation, file = "./Acetylation.Rda")
## -------------------------- Building Methylation Table ----------------------- ##
load("./W_Deprecated_Tables/Methylation.Rda")
counter <- nrow(Methylation) + 1
t <- ptm::me.scan(prot_id, ptm_db)
if (is.null(nrow(t))){
new <- c(counter, prot_id, 'Any', label, release, paste(prot_id, 'Any', sep = "-"))
Methylation[counter, ] <- new
} else if (nrow(t) == 0){
new <- c(counter, prot_id, 'Any', label, release, paste(prot_id, 'Any', sep = "-"))
Methylation[counter, ] <- new
} else if (nrow(t) > 0){
for (j in 1:nrow(t)){
new <- c(counter, t$up_id[j], t$modification[j], label, release,
paste(prot_id, t$modification[j], sep = "-"))
Methylation[counter, ] <- new
counter <- counter + 1
}
}
closeAllConnections()
save(Methylation, file = "./Methylation.Rda")
# ## -------------------------- Building Ubiquitination Table ----------------------- ##
load("./W_Deprecated_Tables/Ubiquitination.Rda")
counter <- nrow(Ubiquitination) + 1
t <- ptm::ub.scan(prot_id, ptm_db)
if (is.null(nrow(t))){
new <- c(counter, prot_id, 'Any', alabel, release, paste(prot_id, 'Any', sep = "-"))
Ubiquitination[counter, ] <- new
} else if (nrow(t) == 0){
new <- c(counter, prot_id, 'Any', label, release, paste(prot_id, 'Any', sep = "-"))
Ubiquitination[counter, ] <- new
} else if (nrow(t) > 0){
for (j in 1:nrow(t)){
new <- c(counter, t$up_id[j], t$modification[j], label, release,
paste(prot_id, t$modification[j], sep = "-"))
Ubiquitination[counter, ] <- new
counter <- counter + 1
}
}
closeAllConnections()
save(Ubiquitination, file = "./Ubiquitination.Rda")
## -------------------------- Building OGlcNAc Table ----------------------- ##
load("./W_Deprecated_Tables/OGlcNAc.Rda")
counter <- nrow(OGlcNAc) + 1
t <- ptm::gl.scan(prot_id, ptm_db)
if (is.null(nrow(t))){
new <- c(counter, prot_id, 'Any', label, release, paste(prot_id, 'Any', sep = "-"))
OGlcNAc[row(OGlcNAc)+1, ] <- new
} else if (nrow(t) == 0){
new <- c(counter, prot_id, 'Any', label, release, paste(prot_id, 'Any', sep = "-"))
OGlcNAc[counter, ] <- new
} else if (nrow(t) > 0){
for (j in 1:nrow(t)){
new <- c(counter, t$up_id[j], t$modification[j], label, release,
paste(prot_id, t$modification[j], sep = "-"))
OGlcNAc[counter, ] <- new
counter <- counter + 1
}
}
closeAllConnections()
save(OGlcNAc, file = "./OGlcNAc.Rda")
## -------------------------- Building RegPTM Table ----------------------- ##
## --- Ancillary function:
regadhoc <- function(up_id) {
reg_db <- NULL
baseUrl <- "https://github.com/jcaledo/reg_db/blob/master/"
call <- paste(baseUrl, "reg_db_", up_id, ".Rda?raw=true",
sep = "")
resp <- try(load(url(call)), silent = TRUE)
if (inherits(resp, "try-error")) {
text <- "Sorry, no modification sites were found for this protein"
return(text)
}
t <- reg_db[which(reg_db$up_id == up_id), ]
## ------ Need to be update
load("./Methionine.Rda")
m <- Methionine[which(Methionine$prot_id == up_id),]
m <- m$met_pos[which(m$reg_id > 2)]
if (length(m) > 0) {
meto <- as.data.frame(matrix(rep(NA, 4 * length(m)), ncol = 4))
names(meto) <- c("up_id", "organism", "modification",
"database")
for (i in 1:length(m)) {
meto$up_id[i] <- up_id
meto$organism[i] <- NA
meto$modification[i] <- paste("M", m[i],
"-ox", sep = "")
meto$database[i] <- "MetOSite"
}
t <- rbind(t, meto)
}
return(t)
}
load("./W_Deprecated_Tables/RegPTM.Rda")
counter <- nrow(RegPTM) + 1
t <- regadhoc(prot_id)
if (is.null(nrow(t))){
new <- c(counter, prot_id, 'Any', label, release, paste(prot_id, 'Any', sep = "-"))
RegPTM[counter, ] <- new
} else if (nrow(t) > 0){
for (j in 1:nrow(t)){
new <- c(counter, t$up_id[j], t$modification[j], label, release,
paste(prot_id, t$modification[j], sep = "-"))
RegPTM[counter, ] <- new
counter <- counter + 1
}
}
closeAllConnections()
save("./RegPTM.Rda")
## -------------------------- Building Disease Table ----------------------- ##
load("./W_Deprecated_Tables/Disease.Rda")
counter <- nrow(Disease) + 1
t <- ptm::dis.scan(prot_id)
if (is.null(nrow(t))){
new <- c(counter, prot_id, 'Any', label, release, paste(prot_id, 'Any', sep = "-"))
Disease[counter, ] <- new
} else if (nrow(t) > 0){
for (j in 1:nrow(t)){
new <- c(counter, t$up_id[j], t$modification[j], label, release,
paste(prot_id, t$modification[j], sep = "-"))
Disease[counter, ] <- new
counter <- counter + 1
}
}
closeAllConnections()
save(Disease, file = "./Disease.Rda")
}
View(Methionine)
source('~/Desktop/addEntry.R')
source('~/Desktop/addEntry.R')
w <- ptm::dis.scan(prot_id)
is.null(nrow(w))
View(Methionine)
Methionine$met_id[7574]
str(Methionine$met_id[7574])
str(Methionine$met_id)
org_id
View(Methionine)
View(Methionine)
View(Methionine)
rm(list = ls())
source('~/Desktop/addEntry.R')
View(Methionine)
View(Evidence)
table(DOI$label)
table(Evidence$label)
View(Evidence)
evi_id
str(Evidence$label)
View(Methionine)
View(Acetylation)
View(Disease)
View(DOI)
View(Methylation)
View(OGlcNAc)
View(Organism)
View(Phosphorylation)
View(Protein)
str(Protein$label)
View(RegPTM)
View(Phosphorylation)
View(Taxon)
View(Ubiquitination)
View(RegPTM)
View(RegPTM)
w
w <- RegPTM[which(RegPTM$prot_id == prot_id), ]
View(w)
ww <- RegPTM[which(RegPTM$prot_id == prot_id & RegPTM$label != label), ]
View(ww)
save("./W_Deprecated_Tables/RegPTM.Rda")
load("./W_Deprecated_Tables/RegPTM.Rda")
rm(w, ww)
rm(RegPTM)
load("./W_Deprecated_Tables/RegPTM.Rda")
w <- RegPTM[which(RegPTM$prot_id != prot_id), ]
## -------------------------------------------------------------------- ##
## ---------------------- Ancillary function -------------------------- ##
## -------------------------------------------------------------------- ##
# Make sure that the dataframe RegPTM is in the Environment
reg.table <- function(prot_id){
counter <- nrow(RegPTM) + 1
t <- regadhoc(prot_id)
if (is.null(nrow(t))){
new <- c(counter, prot_id, 'Any', label, release, paste(prot_id, 'Any', sep = "-"))
RegPTM[counter, ] <- new
} else if (nrow(t) > 0){
for (j in 1:nrow(t)){
new <- c(counter, t$up_id[j], t$modification[j], label, release,
paste(prot_id, t$modification[j], sep = "-"))
RegPTM[counter, ] <- new
counter <- counter + 1
}
}
closeAllConnections()
save(RegPTM, file = "./RegPTM.Rda")
}
RegPTM <- RegPTM[which(RegPTM$prot_id != prot_id), ]
reg.table(prot_id)
rm(list = ls())
source('~/Desktop/addEntry.R')
rm(list = ls())
source('~/Desktop/addEntry.R')
View(Methionine)
View(Acetylation)
w <- Acetylation[which(Acetylation$prot_id == prot_id), ]
View(w)
View(RegPTM)
rm(list = ls())
source('~/Desktop/addEntry.R')
View(DOI)
View(Evidence)
View(Methionine)
View(Organism)
View(Protein)
View(RegPTM)
View(Taxon)
?dirname
to = "C:/Users/msc2/Desktop/Halwa/BADMASHI/SCOP/rabata.txt"
to
dirname(to)
?file.copy
file.copy(from = "./W_Deprecated_Tables/Phosphorylation.Rda",
to = "./Phosphorylation.Rda")
rm(list = ls())
setwd("/Users/juancarlosaledo/Dropbox/Investigacion/metosite/MetDB_2019/metdb2021/R_tables")
source('~/Desktop/addEntry.R')
View(RegPTM)
##---------------------------------------------------------- ##
## --------------------  Quality Tests  -------------------- ##
## --------------------------------------------------------- ##
rm(list=ls())
source("../R_MetOSite_Building_Tools/Quality.R")
check.met()
load("/Users/juancarlosaledo/Dropbox/Investigacion/metosite/MetDB_2019/metdb2021/R_tables/W_Deprecated_Tables/Methionine.Rda")
exists(Methionine)
is.data.frame(Methionine)
str(path)
path = TRUE
path
str(path)
is.logi(path)
is.logical(path)
rm(Methionine)
# load("/Users/juancarlosaledo/Dropbox/Investigacion/metosite/MetDB_2019/metdb2019/R_tables/Methionine.Rda")
load("/Users/JCA/Dropbox/Investigacion/metosite/MetDB_2019/metdb2021/R_tables/Methionine.Rda")
load("/Users/juancarlosaledo/Dropbox/Investigacion/metosite/MetDB_2019/metdb2021/R_tables/Methionine.Rda")
exists("Methionine")
load("/Users/juancarlosaledo/Dropbox/Investigacion/metosite/MetDB_2019/metdb2021/R_tables/W_Deprecated_Tables/Methionine.Rda")
exists("Methionine")
rm(list = ls())
source('~/Desktop/addEntry.R')
check.met()
check.prot()
check.pos()
path
source('~/Dropbox/Investigacion/metosite/MetDB_2019/metdb2021/R_MetOSite_Building_Tools/Quality.R')
getwd()
check.met()
source('~/Dropbox/Investigacion/metosite/MetDB_2019/metdb2021/R_MetOSite_Building_Tools/Quality.R')
check.met()
getwd()
setwd("/Users/juancarlosaledo/Dropbox/Investigacion/metosite/MetDB_2019/metdb2021/R_tables")
load("./Methionine.Rda")
rm(Methionine)
if (exists("path")){
load("path")
data <- Methionine
} else if (exists("Methionine")){
data <- Methionine
} else {
load("./Methionine.Rda")
data <- Methionine
}
rm(Methionine)
source('~/Dropbox/Investigacion/metosite/MetDB_2019/metdb2021/R_MetOSite_Building_Tools/Quality.R')
check.met()
=======
h$time[i] <- b-a
closeAllConnections()
}
for (i in 20:100){
print(i)
a <- Sys.time()
h$test[i] <- ptm.plot(h$prot_id[i],
property = 'acc',
ptm = 'reg')
b <- Sys.time()
h$time[i] <- b-a
closeAllConnections()
}
for (i in 22:100){
print(i)
a <- Sys.time()
h$test[i] <- ptm.plot(h$prot_id[i],
property = 'acc',
ptm = 'reg')
b <- Sys.time()
h$time[i] <- b-a
closeAllConnections()
}
for (i in 24:100){
print(i)
a <- Sys.time()
h$test[i] <- ptm.plot(h$prot_id[i],
property = 'acc',
ptm = 'reg')
b <- Sys.time()
h$time[i] <- b-a
closeAllConnections()
}
for (i in 25:100){
print(i)
a <- Sys.time()
h$test[i] <- ptm.plot(h$prot_id[i],
property = 'acc',
ptm = 'reg')
b <- Sys.time()
h$time[i] <- b-a
closeAllConnections()
}
for (i in 28:100){
print(i)
a <- Sys.time()
h$test[i] <- ptm.plot(h$prot_id[i],
property = 'acc',
ptm = 'reg')
b <- Sys.time()
h$time[i] <- b-a
closeAllConnections()
}
for (i in 32:100){
print(i)
a <- Sys.time()
h$test[i] <- ptm.plot(h$prot_id[i],
property = 'acc',
ptm = 'reg')
b <- Sys.time()
h$time[i] <- b-a
closeAllConnections()
}
for (i in 33:100){
print(i)
a <- Sys.time()
h$test[i] <- ptm.plot(h$prot_id[i],
property = 'acc',
ptm = 'reg')
b <- Sys.time()
h$time[i] <- b-a
closeAllConnections()
}
for (i in 35:100){
print(i)
a <- Sys.time()
h$test[i] <- ptm.plot(h$prot_id[i],
property = 'acc',
ptm = 'reg')
b <- Sys.time()
h$time[i] <- b-a
closeAllConnections()
}
function(up_id, pdb = "", property, ptm , dssp = 'compute',
window = 1, sdata = TRUE, ...){
aa <- aai$aa
## ------------------------------------------------------------------- ##
## ---------------- Is there any PDB for this protein? --------------- ##
## ------------------------------------------------------------------- ##
if (nchar(pdb) == 6){ # ----- the user provide the PDB and chain
t <- strsplit(pdb, split = "\\.")[[1]]
pdb_id <- t[1]
pdb_chain <- t[2]
exists.pdb <- TRUE
} else if (pdb == ""){ # ---- the PDB is selected by the script
pdb <- pdb.select(up_id)
if (pdb[[1]][1] == 'NO PDB FOUND'){
exists.pdb <- FALSE
} else {
exists.pdb <- TRUE
pdb_id <- pdb[[1]][1]
pdb_chain <- pdb[[2]][1]
pdb_coverage <- attributes(pdb)$coverage
}
} else {
stop("Wrong pdb input!")
}
## ------------------------------------------------------------------- ##
## ------------------- Use of cache when possible -------------------- ##
## ------------------------------------------------------------------- ##
file_scan <- paste("./plotptm_cache/scan_", up_id, ".Rda", sep = "")
if (file.exists(file_scan)){
load(file_scan)
}
if (exists.pdb){
file_sse <- paste("./plotptm_cache/sse_", pdb_id, ".Rda", sep = "")
if (file.exists(file_sse)){
load(file_sse)
}
}
## ------------------------------------------------------------------- ##
## ------- Checking that a suitable property has been selected ------- ##
## ------------------------------------------------------------------- ##
pdb_property <- c('sasa', 'acc', 'dpx')
aa_property <- c('volume','mutability', 'helix', 'beta-sheet', 'pi-helix',
'hydropathy', 'avg.hyd', 'hplc', 'argos', 'eiip',
'polarizability')
names(aa_property) <- c('FAUJ880103', 'JOND920102', 'KANM800101', 'KANM800102',
'FODM020101', 'KYTJ820101', 'CIDH920105', 'MEEJ800101',
'ARGP820101', 'VELV850101', 'CHAM820101')
evo_property <- c('entropy7.aa', 'entropy100.aa','entropy7.condon', 'entropy100.codon')
all_property <- c(pdb_property, aa_property, evo_property, 'own')
if (! property %in% all_property){
stop("A proper property must be indicated")
}
if (!exists.pdb & property %in% pdb_property){
stop('This property cannot be computed because no PDB file could be found')
}
if (!is.numeric(window) || window < 1){
stop("'window' must be numeric and positive")
}
if (property == 'own'){
z <- list(...)
if (length(z) == 0){
stop("No aa index has been provided")
} else {
index <- z[[1]]
}
if (sum(aa == names(index)) != 20){
stop("The provided aa index must be a named numeric vector")
}
}
## ------------------------------------------------------------------- ##
## ---------- Checking that a suitable ptm has been selected --------- ##
## ------------------------------------------------------------------- ##
supported_ptm <- c('ac', 'me', 'meto', 'p', 'su', 'ub', 'gl', 'sni',
'ni', 'reg', 'dis', 'all')
names(supported_ptm) <- c('green', 'aquamarine', 'red', 'orange', 'deeppink',
'darkgreen', 'purple', 'yellow', 'blue',
'deepskyblue4', 'darkseagreen3', 'black')
should_be_empty <- setdiff(ptm, supported_ptm)
if (length(should_be_empty) != 0){
stop("The supported PTMs are 'ac', 'me', 'meto', 'p', 'su', 'ub', 'gl', 'sni',
'ni', 'reg', 'dis'")
}
if (ptm[1] == 'all'){
ptm <- supported_ptm
}
## ------------------------------------------------------------------- ##
## -------------- Scanning the protein for PTM sites ----------------- ##
## ------------------------------------------------------------------- ##
if (! 'scan' %in% ls()){
scan <- suppressWarnings(ptm.scan(up_id))
if (sdata){
dir.create("plotptm_cache", showWarnings = FALSE)
save(scan, file = paste("./plotptm_cache/scan_", up_id, ".Rda", sep = ""))
}
}
if (! grepl("Sorry", scan)[1]){
ptmScan <- scan[, c(2,3, which(colnames(scan) %in% ptm))]
modifications <- !is.na(ptmScan[,3:dim(ptmScan)[2]])
ptmScan$multi <- apply(as.matrix(modifications), 1, sum)
ptmScan <- ptmScan[which(ptmScan$multi != 0), ]
if (nrow(ptmScan) > 0){
exists.ptm <- TRUE
for (i in 1:nrow(ptmScan)){
if (ptmScan$multi[i] == 1){
ptmScan$col[i] <- names(ptmScan[which(ptmScan[i,-1] == TRUE) + 1][1])
} else {
ptmScan$col[i] <- "black"
}
}
for (i in 1:nrow(ptmScan)){
t <- ptmScan$col[i]
if (t == "black"){
color = "black"
} else {
color <- names(supported_ptm)[which(supported_ptm == t)]
}
ptmScan$col[i] <- color
}
} else { # no PTM sites found
exists.ptm <- FALSE
}
} else {
exists.ptm <- FALSE
}
## ------------------------------------------------------------------- ##
## -------- Computing sse and raw 3d properties when required -------- ##
## ------------------------------------------------------------------- ##
if (exists.pdb){
if (! 'sse' %in% ls()){
sse <- acc.dssp(pdb_id, dssp = dssp)
if (sdata){
dir.create("plotptm_cache", showWarnings = FALSE)
save(sse, file = paste("./plotptm_cache/sse_", pdb_id, ".Rda", sep = ""))
}
}
sse <- sse[which(sse$chain == pdb_chain), ]
seq <- sse$aa # aa sequence
seq <- gsub("[a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r]", "C", seq) # half cystines
names(seq) <- sse$respdb # position of each aa
sse$sse <- NA
for (i in 1:nrow(sse)){
if (sse$ss[i] %in% c('G', 'H', 'I')){
sse$sse[i] <- 1 # helixes arecoded as 1
} else if (sse$ss[i] %in% c('E', 'B')){
sse$sse[i] <- -1 # strands are coded as -1
} else {
sse$sse[i] <- 0 # coils are code as 0
}
}
helices <- sse[which(sse$sse == 1),]
strands <- sse[which(sse$sse == -1),]
coils <- sse[which(sse$sse == 0),]
if (window >= nrow(sse)) {
stop("'window' must be smaller than the sequence length")
}
if (property == 'dpx'){
dpx <- res.dpx(pdb_id)
} else if (property == 'hetatom'){
# -------- TO BE COMPLETED
} else if (property == 'ncontacts'){
# -------- TO BE COMPLETED
}
} else { # When there is no pdb to be used
seq <- get.seq(id.mapping(up_id, 'uniprot', 'kegg'),
db = 'kegg-aa', as.string = FALSE)[[1]] # aa sequence
names(seq) <- 1:length(seq) # aa position
if (window >= length(aa)){
stop("'window' must be smaller than the sequence length")
}
}
## ------------------------------------------------------------------- ##
## ---------- Computing the property values sequence ----------------- ##
## ------------------------------------------------------------------- ##
if (property == 'own'){
property_seq_mon <- property_seq_com <- index[seq]
} else if (property %in% aa_property){
i <- names(aa_property)[which(aa_property == property)]
property_seq_mon <- property_seq_com <- bio3d::aa.index[[i]]$I[seq]
} else if (property == "sasa"){
property_seq_mon <- sse$sasa_chain
property_seq_com <- sse$sasa_complex
} else if (property == "acc"){
property_seq_mon <- sse$acc_chain
property_seq_com <- sse$acc_complex
} else if (property == "dpx"){
dpx <- res.dpx(pdb_id)[which(dpx$chain == pdb_chain), ]
property_seq_mon <- dpx$min_dpx_chain
property_seq_com <- dpx$min_dpx_complex
} else if (property == "hetatom"){
## ----------------------------------------- TO BE COMPLETED ----------------- ##
} else if (property == "ncontacts"){
## ----------------------------------------- TO BE COMPLETED ----------------- ##
} else if (property == "entropy7.aa"){
t <- shannon(id.mapping(up_id, 'uniprot', 'kegg'), 'vertebrates', base = 21)
property_seq_mon <- property_seq_com <- t$Haa
} else if (property == "entropy7.codon"){
t <- shannon(id.mapping(up_id, 'uniprot', 'kegg'), 'vertebrates', base = 4, alphabet = 4)
property_seq_mon <- property_seq_com <- t$Hcodon
} else if (property == "entropy100.aa"){
t <- shannon(id.mapping(up_id, 'uniprot', 'kegg'), 'one-hundred', base = 21)
property_seq_mon <- property_seq_com <- t$Haa
} else if (property == "entropy100.codon"){
t <- shannon(id.mapping(up_id, 'uniprot', 'kegg'), 'one-hundred', base = 4, alphabet = 4)
property_seq_mon <- property_seq_com <- t$Hcodon
}
## ------------------------------------------------------------------- ##
## ------- Smoothing the computed property values sequence ----------- ##
## ------------------------------------------------------------------- ##
smooth <- function(x, window){
if (window == 1) {
y <- x
} else {
n <- length(x)
y <- rep(NA, n)
w <- ceiling(window/2)
}
if ((window%%2) == 0) {
from <- w
to <- n - w
y[from:to] <- sapply(from:to, function(i) mean(x[(i - w + 1):(i + w)], na.rm = TRUE))
if (from - 1 > 0) {
y[1:(from - 1)] <- sapply(1:(from - 1), function(i) mean(x[1:(i + w)], na.rm = TRUE))
}
y[(to + 1):n] <- sapply((to + 1):n, function(i) mean(x[(i - w + 1):n], na.rm = TRUE))
} else {
from <- w
to <- n - (w - 1)
y[from:to] <- sapply(from:to, function(i) mean(x[(i - w + 1):(i + w - 1)], na.rm = TRUE))
y[1:(from - 1)] <- sapply(1:(from - 1), function(i) mean(x[1:(i + w - 1)], na.rm = TRUE))
y[(to + 1):n] <- sapply((to + 1):n, function(i) mean(x[(i - w + 1):n], na.rm = TRUE))
}
y <- round(y, 2)
return(y)
}
if (window > 1){
s_property_seq_mon <- smooth(property_seq_mon, window = window)
s_property_seq_com <- smooth(property_seq_com, window = window)
} else {
s_property_seq_mon <- property_seq_mon
s_property_seq_com <- property_seq_com
}
## ---------------------------------------------------------------- ##
## --------------------- Dependent Variable  ---------------------- ##
## ---------------------------------------------------------------- ##
if (property == 'sasa'){
y <- s_property_seq_com
ylab <- expression(paste('SASA (', ring(A)^2, ')', sep = ""))
dy <- s_property_seq_mon - s_property_seq_com
dylab <- expression(paste(Delta, 'SASA (', ring(A)^2, ')', sep = ""))
} else if (property == 'acc'){
y <- s_property_seq_com
ylab <- 'Accessibility'
dy <- s_property_seq_mon - s_property_seq_com
dylab <- expression(paste(Delta, "Accessibility"))
} else if (property == 'dpx'){
y <- s_property_seq_com
ylab <- expression(paste('Depth (', ring(A), ')', sep = ""))
dy <- s_property_seq_com - s_property_seq_mon
dylab <- expression(paste(Delta,'Depth (', ring(A), ')', sep = ""))
} else if (property == 'hetatm'){
## ------- TO BE COMPLETED
ylab <- expression(paste('Minimal Distance to AS (', ring(A), ')', sep = ""))
} else if (property == 'ncontacts'){
## ------- TO BE COMPLETED
ylab <-'Total number of contacts'
} else if (property == 'ncontacts.intra'){
## ------- TO BE COMPLETED
ylab <-'Number of intramolecular contacts'
} else if (property == 'ncontacts.inter'){
## ------- TO BE COMPLETED
ylab <-'Number of intermolecular contacts'
} else if (property == 'entropy7.aa'){
y <- s_property_seq_com
ylab <- "Shannon's entropy.aa7"
} else if (property == 'entropy7.codon'){
y <- s_property_seq_com
ylab <- "Shannon's entropy.codon7"
} else if (property == 'entropy100.aa'){
y <- s_property_seq_com
ylab <- "Shannon's entropy.aa100"
} else if (property == 'entropy100.codon'){
y <- s_property_seq_com
ylab <- "Shannon's entropy.codon100"
} else if (property == 'eiip'){
y <- s_property_seq_com
ylab <- "EIIP"
} else if (property == 'volume'){
y <- s_property_seq_com
ylab <- "Volume"
} else if (property == 'avg.hyd'){
y <- s_property_seq_com
ylab <- "Averaged Hydrophobicity Index"
} else if (property == 'pi-helix'){
y <- s_property_seq_com
ylab <- "pi-Helix Propensity"
} else if (property == 'helix'){
y <- s_property_seq_com
ylab <- "Alpha-Helix Propensity"
} else if (property == 'beta-sheet'){
y <- s_property_seq_com
ylab <- "Beta-Sheet Propensity"
} else if (property == 'argos'){
y <- s_property_seq_com
ylab <- "Hydrophobicity index"
} else if (property == 'mutability'){
y <- s_property_seq_com
ylab <- "Relative Mutability"
} else if (property == 'hplc'){
y <- s_property_seq_com
ylab <- "Retention time in HPLC"
} else if (property == "polarizability"){
y <- s_property_seq_com
ylab <- "Polarizability"
} else if (property == 'own'){
y <- s_property_seq_com
ylab <- "Own Index"
}
## ---------------------------------------------------------------- ##
## ------------------------ Ploting data -------------------------- ##
## ---------------------------------------------------------------- ##
olmfrow <- par('mfrow')
olmar <- par('mar')
par(mar = c(2, 4.1, 2, 2.1))
## -------- When two plots are shown (chain vs complex) ----------- ##
if (sum(s_property_seq_com != s_property_seq_mon) != 0){ # Two plots
# layout(matrix(c(1,2), 2, 1, byrow = TRUE))
par(mfrow = c(2,1))
xlab = ""
} else {
xlab = "Residue Number"
}
## -------------- Plot 1: Property in the complex ----------------- ##
x <- as.numeric(names(seq))
y <- s_property_seq_com
names(y) <- names(seq)
ymin <- min(y, na.rm = TRUE)
ymax <- max(y, na.rm = TRUE)
ylim <- c(ymin - 0.1*(ymax - ymin), ymax + 0.1*(ymax - ymin))
i <- which(!is.na(y))
plot(x[i], na.omit(y), type = 'l', xlab = xlab,
ylim = ylim, ylab = "")
mtext(text = ylab, side = 2, line = 2)
if (exists.ptm){ # Add point corresponding to the PTM sites
ptmScan <- ptmScan[which(ptmScan$n %in% x), ] # Only modified sites present in the PDB
if (nrow(ptmScan) >= 1) { # PTM sites may not be found in the PDB structure
for (i in 1:nrow(ptmScan)){
t <- ptmScan$n[i]
points(t, y[which(names(y) == t)], pch = 19,
cex = 0.55*ptmScan$multi[i], col = ptmScan$col[i])
}
}
if (exists.pdb){
points(coils$respdb, rep(ymin - 0.07*(ymax - ymin), nrow(coils)),
pch = 15, col = 'pink', cex = 0.5)
points(helices$respdb, rep(ymin -0.07*(ymax - ymin), nrow(helices)),
pch = 15, col = 'cyan', cex = 0.5)
points(strands$respdb, rep(ymin -0.07*(ymax - ymin), nrow(strands)),
pch = 15, col = 'magenta', cex = 0.5)
}
}
## -------------- Plot 2: Property in the monomer ----------------- ##
if (sum(s_property_seq_mon != s_property_seq_com) != 0){
# Plot 2: Changes in the property |complex - chain|
names(dy) <- names(y)
dymin <- min(y, na.rm = TRUE)
dymax <- max(y, na.rm = TRUE)
dylim <- c(ymin - 0.1*(dymax - dymin), ymax + 0.1*(dymax - dymin))
i <- which(!is.na(dy))
plot(x[i], dy, type = 'l', xlab = 'Residue Number', ylab = "", ylim = dylim)
mtext(text = dylab, side = 2, line = 2)
if (exists.ptm){
if (nrow(ptmScan) >= 1) {
for (i in 1:nrow(ptmScan)){
t <- ptmScan$n[i]
points(t, dy[which(names(dy) == t)], pch = 19,
cex = 0.55*ptmScan$multi[i], col = ptmScan$col[i])
}
}
}
points(coils$respdb, rep(dymin - 0.07*(dymax - dymin), nrow(coils)),
pch = 15, col = 'pink', cex = 0.5)
points(helices$respdb, rep(dymin -0.07*(dymax - dymin), nrow(helices)),
pch = 15, col = 'cyan', cex = 0.5)
points(strands$respdb, rep(dymin -0.07*(dymax - dymin), nrow(strands)),
pch = 15, col = 'magenta', cex = 0.5)
}
par(mar = olmar) # restore par to its default value
par(mfrow = olmfrow)
output <- "Work done."
attr(output, "uniprot") <- up_id
if (exists.pdb){
attr(output, "pdb") <- pdb_id
attr(output, "chain") <- pdb_chain
} else {
attr(output, "pdb") <- "No pdb found for this protein"
}
return(output)
}
for (i in 36:100){
print(i)
a <- Sys.time()
h$test[i] <- ptm.plot(h$prot_id[i],
property = 'acc',
ptm = 'reg')
b <- Sys.time()
h$time[i] <- b-a
closeAllConnections()
}
for (i in 37:100){
print(i)
a <- Sys.time()
h$test[i] <- ptm.plot(h$prot_id[i],
property = 'acc',
ptm = 'reg')
b <- Sys.time()
h$time[i] <- b-a
closeAllConnections()
}
for (i in 44:100){
print(i)
a <- Sys.time()
h$test[i] <- ptm.plot(h$prot_id[i],
property = 'acc',
ptm = 'reg')
b <- Sys.time()
h$time[i] <- b-a
closeAllConnections()
}
?shannon
>>>>>>> fb2e1103dfbfb70401b1fdd9b79c2f818436d30d
