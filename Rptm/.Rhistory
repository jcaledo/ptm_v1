1,1,1,1,1,0,
1,1,1,1,1,1), ncol = 6, byrow = TRUE)
reg_id <- prodlim::row.match(merge, as.data.frame(fc))
attr(reg_id, 'effect') <- merge
return(reg_id)
}
## ------------------------------------ Input ------------------------- ##
species <- 'Mus musculus'
tissue <- 'NULL'
oxidant <- 'mical-catalyzed'
release <- 'January_2021'
met_pos <- 308 # position of MetO in the primary structure
met_vivo_vitro <- 'both'
met_ext <- NA
prot_id <- 'Q6PHZ2'
reg_id <- 18
direct <- TRUE
label <- "Regulatory_January_2021"
met_ext <- 'NULL' # oxidation extension
prot_note <- "The sulfoxidation of M281 and M282 activates the kinase in a Ca/CaM-independent fashion. MsrB and Mical1 control the stereospecific redox status of M308, a highly conserved residue in the CaM-binding domain of CaMKII. Oxidized M308 decreased CaM binding and CaMKII activity. In the 6BAB PDB the Met labeling can be different to the one used herein."
ref <- "10.1172/JCI133181"
pmid <- "32749237"
character <- 1
title <- "MICAL1 constrains cardiac stress responses and protects against disease by oxidizing CaMKII."
href <- "https://www.ncbi.nlm.nih.gov/pubmed/32749237"
prot_name <- ''
prot_nickname <- 'NULL'
gene_name <- 'NULL'
prot_pdb <- 'NULL'
prot_sub <- 'NULL'
ptm_db < 'PSP'  # 'PhosPhAt'
domain <- ''
ptm_db <- 'PSP'  # 'PhosPhAt'
domain <- ''
kingdom <- ''
phylum <- ''
class <- ''
order <- ''
family <- ''
genus <- ''
library(ptm)
## ------------------------------------------------------------------------ ##
## --------- Check whether the MetO site is already in the DB ------------- ##
## ------------------------------------------------------------------------ ##
load("./W_Deprecated_Tables/Methionine.Rda")
load("./W_Deprecated_Tables/Organism.Rda")
ctr <- paste(prot_id, met_pos, sep = "-")
t <- Methionine[which(Methionine$ctr == ctr), ]
if (nrow(t) == 1){ # The site already exists
met_id <- t$met_id
old_org_id <- as.numeric(t$org_id)
old_tissue <- Organism$org_tissue[which(Organism$org_id == old_org_id)]
old_oxidant <- Organism$org_oxidant[which(Organism$org_id == old_org_id)]
old_reg_id <- t$reg_id
## ----- Same tissue (St)?
old_tissue <- trimws(old_tissue)
if (old_tissue == tissue){
St <- TRUE
} else if (gregexpr(tissue, old_tissue)[[1]] != -1) {
tissue <- old_tissue
St <- TRUE
} else {
St <- FALSE
if (tissue == 'NULL'){
tissue <- old_tissue
} else if (old_tissue != 'NULL'){
tissue <- paste(old_tissue, tissue, sep = '+')
}
}
## ----- Same oxidant (So)?
old_oxidant <- trimws(old_oxidant)
if (old_oxidant == oxidant){
So <- TRUE
} else if (gregexpr(oxidant, old_oxidant)[[1]] != -1){
oxidant <- old_oxidant
So <- TRUE
} else {
So <- FALSE
oxidant <- paste(old_oxidant, oxidant, sep = ", ")
}
## ----- Same reg_id (Sr)?
if (old_reg_id == reg_id){
Sr <- TRUE
} else {
Sr <- FALSE
reg_id <- merge.regid(c(old_reg_id, reg_id))
}
if (sum(St, So, Sr) == 3){
stop("This entry already exists in MetOSite!")
}
## --- When the MetO site exists but tissue, oxidant and/or reg_id
## --- need to be updated:
n_sites_same_org_id <- length(Methionine$org_id[which(Methionine$org_id == old_org_id)])
if (n_sites_same_org_id == 1){ # change old org_id
Organism$org_tissue[old_org_id] <- tissue
Organism$org_oxidant[old_org_id] <- oxidant
org_id <- old_org_id
save(Organism, file = "./Organism.Rda")
} else if (n_sites_same_org_id > 1) { # create new org_id
Organism[nrow(Organism) + 1, ] <- NA
org_id <- nrow(Organism)
Organism$org_id[org_id] <- org_id
Organism$org_sp[org_id] <- species
Organism$org_tissue[org_id] <- tissue
Organism$org_oxidant[org_id] <- oxidant
Organism$release[org_id] <- release
save(Organism, file = "./Organism.Rda")
} else {
stop("Something went awfully wrong!")
}
} else if (nrow(t) >1){
stop("This entry shouldn't be repeated!")
} else if (nrow(t) == 0){ ## ------------------------------ Bona fide new entry
## ------------------------------------------------------------------------ ##
## --------------------------- Organism Table ----------------------------- ##
## -- If the 'organism' entry doesn't already exist, add it to the table -- ##
o <- Organism[which(Organism$org_sp == species), ]
o <- o[which(o$org_oxidant == oxidant), ]
o <- o[which(o$org_tissue == tissue), ]
if (nrow(o) == 0){
org_id <- nrow(Organism) + 1
Organism[org_id, ] <- NA
Organism$org_id[org_id] <- org_id
Organism$org_sp[org_id] <- species
Organism$org_tissue[org_id] <- tissue
Organism$org_oxidant[org_id] <- oxidant
Organism$release[org_id] <- release
save(Organism, file = "./Organism.Rda")
} else if (nrow(o) == 1){
org_id <- o$org_id
} else {
stop("Repeated organism entries!")
}
## ------------------------------------------------------------------------ ##
## ----------------------------- Taxon Table ------------------------------ ##
## --- If the 'taxon' entry doesn't already exist, add it to the table ---- ##
load("./W_Deprecated_Tables/Taxon.Rda")
if (! species %in% Taxon$org_sp){
Taxon[nrow(Taxon) + 1, ] <- NA
Taxon$org_sp[nrow(Taxon) + 1] <- species
Taxon$domain[nrow(Taxon) + 1] <- domain
Taxon$kingdom[nrow(Taxon) + 1] <- kingdom
Taxon$phylum[nrow(Taxon) + 1] <- phylum
Taxon$class[nrow(Taxon) + 1] <- class
Taxon$order[nrow(Taxon) + 1] <- order
Taxon$family[nrow(Taxon) + 1]  <- family
Taxon$genus[nrow(Taxon) + 1] <- genus
save(Taxon, file = "./Taxon.Rda")
}
## ------------------------------------------------------------------------ ##
## ------------------------ Methionine Table ------------------------------ ##
## ------------------------------------------------------------------------ ##
met_id <- nrow(Methionine) + 1
Methionine[met_id, ] <- NA
Methionine$met_id[met_id] <- met_id
Methionine$met_pos[met_id] <- met_pos
Methionine$met_ext[met_id] <- met_ext
Methionine$met_vivo_vitro[met_id] <- met_vivo_vitro
Methionine$prot_id[met_id] <- prot_id
Methionine$reg_id[met_id] <- reg_id
Methionine$label[met_id] <- label
Methionine$release[met_id] <- release
Methionine$ctr[met_id] <- ctr
Methionine$direct[met_id] <- direct
Methionine$note[met_id] <- note
save(Methionine, file = "./Methionine.Rda")
## ------------------------------------------------------------------------ ##
## -------------------------- Protein Table ------------------------------- ##
## ------------------------------------------------------------------------ ##
load("./W_Deprecated_Tables/Protein.Rda")
t <- Protein[which(Protein$prot_id == prot_id), ]
if (nrow(t) > 1){
stop("Protein entry shoudn't be repeated")
} else if (nrow(t) == 1){
Protein$prot_note[which(Protein$prot_id == prot_id)] <- prot_note
Protein$label[which(Protein$prot_id == prot_id)] <- label
Protein$release[which(Protein$prot_id == prot_id)] <- release
save(Protein, file = "./Protein.Rda")
} else if (nrow(t) == 0){
Protein[nrow(Protein) + 1, ] <- NA
Protein$prot_id[nrow(Protein)] <- nrow(Protein)
Protein$prot_name[nrow(Protein)] <- prot_name
Protein$prot_nickname[nrow(Protein)] <- prot_nickname
Protein$gene_name[nrow(Protein)] <- gene_name
Protein$prot_seq[nrow(Protein)] <- ptm::get.seq(prot_id)
Protein$prot_pdb[nrow(Protein)] <- prot_pdb
Protein$prot_sub[nrow(Protein)] <- prot_sub
Protein$prot_note[nrow(Protein)] <- prot_note
Protein$prot_sp[nrow(Protein)] <- species
Protein$label[nrow(Protein)] <- label
Protein$release[nrow(Protein)] <- release
save(Protein, file = "./Protein")
}
## ------------------------------------------------------------------------ ##
## ------------------------------ PTM Tables ------------------------------ ##
## ------------------------------------------------------------------------ ##
## -------------------- Building Phosphorylation Table -------------------- ##
load("./W_Deprecated_Tables/Phosphorylation.Rda")
counter <- nrow(Phosphorylation) + 1
t <- ptm::p.scan(prot_id, ptm_db)
if (is.null(nrow(t))){
new <- c(counter, prot_id, 'Any', label, release, paste(prot_id, 'Any', sep = "-"))
Phosphorylation[counter, ] <- new
} else if (nrow(t) == 0){
new <- c(counter, prot_id, 'Any', label, release, paste(prot_id, 'Any', sep = "-"))
Phosphorylation[counter, ] <- new
} else if (nrow(t) > 0){
for (j in 1:nrow(t)){
new <- c(counter, t$up_id[j], t$modification[j], label, release,
paste(prot_id, t$modification[j], sep = "-"))
Phosphorylation[counter, ] <- new
counter <- counter + 1
}
}
closeAllConnections()
save(Phosphorylation, file = "./Phosphorylation.Rda")
## ------------------------- Building Acetylation Table ----------------------- ##
load("./W_Deprecated_Tables/Acetylation.Rda")
counter <- nrow(Acetylation) + 1
t <- ptm::ac.scan(prot_id, ptm_db)
if (is.null(nrow(t))){
new <- c(counter, prot_id, 'Any', label, release, paste(prot_id, 'Any', sep = "-"))
Acetylation[counter, ] <- new
} else if (nrow(t) == 0){
new <- c(counter, prot_id, 'Any', label, release, paste(prot_id, 'Any', sep = "-"))
Acetylation[counter, ] <- new
} else if (nrow(t) > 0){
for (j in 1:nrow(t)){
new <- c(counter, t$up_id[j], t$modification[j], label, release,
paste(prot_id, t$modification[j], sep = "-"))
Acetylation[counter, ] <- new
counter <- counter + 1
}
}
closeAllConnections()
save(Acetylation, file = "./Acetylation.Rda")
## -------------------------- Building Methylation Table ----------------------- ##
load("./W_Deprecated_Tables/Methylation.Rda")
counter <- nrow(Methylation) + 1
t <- ptm::me.scan(prot_id, ptm_db)
if (is.null(nrow(t))){
new <- c(counter, prot_id, 'Any', label, release, paste(prot_id, 'Any', sep = "-"))
Methylation[counter, ] <- new
} else if (nrow(t) == 0){
new <- c(counter, prot_id, 'Any', label, release, paste(prot_id, 'Any', sep = "-"))
Methylation[counter, ] <- new
} else if (nrow(t) > 0){
for (j in 1:nrow(t)){
new <- c(counter, t$up_id[j], t$modification[j], label, release,
paste(prot_id, t$modification[j], sep = "-"))
Methylation[counter, ] <- new
counter <- counter + 1
}
}
closeAllConnections()
save(Methylation, file = "./Methylation.Rda")
# ## -------------------------- Building Ubiquitination Table ----------------------- ##
load("./W_Deprecated_Tables/Ubiquitination.Rda")
counter <- nrow(Ubiquitination) + 1
t <- ptm::ub.scan(prot_id, ptm_db)
if (is.null(nrow(t))){
new <- c(counter, prot_id, 'Any', alabel, release, paste(prot_id, 'Any', sep = "-"))
Ubiquitination[counter, ] <- new
} else if (nrow(t) == 0){
new <- c(counter, prot_id, 'Any', label, release, paste(prot_id, 'Any', sep = "-"))
Ubiquitination[counter, ] <- new
} else if (nrow(t) > 0){
for (j in 1:nrow(t)){
new <- c(counter, t$up_id[j], t$modification[j], label, release,
paste(prot_id, t$modification[j], sep = "-"))
Ubiquitination[counter, ] <- new
counter <- counter + 1
}
}
closeAllConnections()
save(Ubiquitination, file = "./Ubiquitination.Rda")
## -------------------------- Building OGlcNAc Table ----------------------- ##
load("./W_Deprecated_Tables/OGlcNAc.Rda")
counter <- nrow(OGlcNAc) + 1
t <- ptm::gl.scan(prot_id, ptm_db)
if (is.null(nrow(t))){
new <- c(counter, prot_id, 'Any', label, release, paste(prot_id, 'Any', sep = "-"))
OGlcNAc[row(OGlcNAc)+1, ] <- new
} else if (nrow(t) == 0){
new <- c(counter, prot_id, 'Any', label, release, paste(prot_id, 'Any', sep = "-"))
OGlcNAc[counter, ] <- new
} else if (nrow(t) > 0){
for (j in 1:nrow(t)){
new <- c(counter, t$up_id[j], t$modification[j], label, release,
paste(prot_id, t$modification[j], sep = "-"))
OGlcNAc[counter, ] <- new
counter <- counter + 1
}
}
closeAllConnections()
save(OGlcNAc, file = "./OGlcNAc.Rda")
## -------------------------- Building RegPTM Table ----------------------- ##
## --- Ancillary function:
regadhoc <- function(up_id) {
reg_db <- NULL
baseUrl <- "https://github.com/jcaledo/reg_db/blob/master/"
call <- paste(baseUrl, "reg_db_", up_id, ".Rda?raw=true",
sep = "")
resp <- try(load(url(call)), silent = TRUE)
if (inherits(resp, "try-error")) {
text <- "Sorry, no modification sites were found for this protein"
return(text)
}
t <- reg_db[which(reg_db$up_id == up_id), ]
## ------ Need to be update
load("./Methionine.Rda")
m <- Methionine[which(Methionine$prot_id == up_id),]
m <- m$met_pos[which(m$reg_id > 2)]
if (length(m) > 0) {
meto <- as.data.frame(matrix(rep(NA, 4 * length(m)), ncol = 4))
names(meto) <- c("up_id", "organism", "modification",
"database")
for (i in 1:length(m)) {
meto$up_id[i] <- up_id
meto$organism[i] <- NA
meto$modification[i] <- paste("M", m[i],
"-ox", sep = "")
meto$database[i] <- "MetOSite"
}
t <- rbind(t, meto)
}
return(t)
}
load("./W_Deprecated_Tables/RegPTM.Rda")
counter <- nrow(RegPTM) + 1
t <- regadhoc(prot_id)
if (is.null(nrow(t))){
new <- c(counter, prot_id, 'Any', label, release, paste(prot_id, 'Any', sep = "-"))
RegPTM[counter, ] <- new
} else if (nrow(t) > 0){
for (j in 1:nrow(t)){
new <- c(counter, t$up_id[j], t$modification[j], label, release,
paste(prot_id, t$modification[j], sep = "-"))
RegPTM[counter, ] <- new
counter <- counter + 1
}
}
closeAllConnections()
save("./RegPTM.Rda")
## -------------------------- Building Disease Table ----------------------- ##
load("./W_Deprecated_Tables/Disease.Rda")
counter <- nrow(Disease) + 1
t <- ptm::dis.scan(prot_id)
if (is.null(nrow(t))){
new <- c(counter, prot_id, 'Any', label, release, paste(prot_id, 'Any', sep = "-"))
Disease[counter, ] <- new
} else if (nrow(t) > 0){
for (j in 1:nrow(t)){
new <- c(counter, t$up_id[j], t$modification[j], label, release,
paste(prot_id, t$modification[j], sep = "-"))
Disease[counter, ] <- new
counter <- counter + 1
}
}
closeAllConnections()
save(Disease, file = "./Disease.Rda")
}
View(Methionine)
source('~/Desktop/addEntry.R')
source('~/Desktop/addEntry.R')
w <- ptm::dis.scan(prot_id)
is.null(nrow(w))
View(Methionine)
Methionine$met_id[7574]
str(Methionine$met_id[7574])
str(Methionine$met_id)
org_id
View(Methionine)
View(Methionine)
View(Methionine)
rm(list = ls())
source('~/Desktop/addEntry.R')
View(Methionine)
View(Evidence)
table(DOI$label)
table(Evidence$label)
View(Evidence)
evi_id
str(Evidence$label)
View(Methionine)
View(Acetylation)
View(Disease)
View(DOI)
View(Methylation)
View(OGlcNAc)
View(Organism)
View(Phosphorylation)
View(Protein)
str(Protein$label)
View(RegPTM)
View(Phosphorylation)
View(Taxon)
View(Ubiquitination)
View(RegPTM)
View(RegPTM)
w
w <- RegPTM[which(RegPTM$prot_id == prot_id), ]
View(w)
ww <- RegPTM[which(RegPTM$prot_id == prot_id & RegPTM$label != label), ]
View(ww)
save("./W_Deprecated_Tables/RegPTM.Rda")
load("./W_Deprecated_Tables/RegPTM.Rda")
rm(w, ww)
rm(RegPTM)
load("./W_Deprecated_Tables/RegPTM.Rda")
w <- RegPTM[which(RegPTM$prot_id != prot_id), ]
## -------------------------------------------------------------------- ##
## ---------------------- Ancillary function -------------------------- ##
## -------------------------------------------------------------------- ##
# Make sure that the dataframe RegPTM is in the Environment
reg.table <- function(prot_id){
counter <- nrow(RegPTM) + 1
t <- regadhoc(prot_id)
if (is.null(nrow(t))){
new <- c(counter, prot_id, 'Any', label, release, paste(prot_id, 'Any', sep = "-"))
RegPTM[counter, ] <- new
} else if (nrow(t) > 0){
for (j in 1:nrow(t)){
new <- c(counter, t$up_id[j], t$modification[j], label, release,
paste(prot_id, t$modification[j], sep = "-"))
RegPTM[counter, ] <- new
counter <- counter + 1
}
}
closeAllConnections()
save(RegPTM, file = "./RegPTM.Rda")
}
RegPTM <- RegPTM[which(RegPTM$prot_id != prot_id), ]
reg.table(prot_id)
rm(list = ls())
source('~/Desktop/addEntry.R')
rm(list = ls())
source('~/Desktop/addEntry.R')
View(Methionine)
View(Acetylation)
w <- Acetylation[which(Acetylation$prot_id == prot_id), ]
View(w)
View(RegPTM)
rm(list = ls())
source('~/Desktop/addEntry.R')
View(DOI)
View(Evidence)
View(Methionine)
View(Organism)
View(Protein)
View(RegPTM)
View(Taxon)
?dirname
to = "C:/Users/msc2/Desktop/Halwa/BADMASHI/SCOP/rabata.txt"
to
dirname(to)
?file.copy
file.copy(from = "./W_Deprecated_Tables/Phosphorylation.Rda",
to = "./Phosphorylation.Rda")
rm(list = ls())
setwd("/Users/juancarlosaledo/Dropbox/Investigacion/metosite/MetDB_2019/metdb2021/R_tables")
source('~/Desktop/addEntry.R')
View(RegPTM)
##---------------------------------------------------------- ##
## --------------------  Quality Tests  -------------------- ##
## --------------------------------------------------------- ##
rm(list=ls())
source("../R_MetOSite_Building_Tools/Quality.R")
check.met()
load("/Users/juancarlosaledo/Dropbox/Investigacion/metosite/MetDB_2019/metdb2021/R_tables/W_Deprecated_Tables/Methionine.Rda")
exists(Methionine)
is.data.frame(Methionine)
str(path)
path = TRUE
path
str(path)
is.logi(path)
is.logical(path)
rm(Methionine)
# load("/Users/juancarlosaledo/Dropbox/Investigacion/metosite/MetDB_2019/metdb2019/R_tables/Methionine.Rda")
load("/Users/JCA/Dropbox/Investigacion/metosite/MetDB_2019/metdb2021/R_tables/Methionine.Rda")
load("/Users/juancarlosaledo/Dropbox/Investigacion/metosite/MetDB_2019/metdb2021/R_tables/Methionine.Rda")
exists("Methionine")
load("/Users/juancarlosaledo/Dropbox/Investigacion/metosite/MetDB_2019/metdb2021/R_tables/W_Deprecated_Tables/Methionine.Rda")
exists("Methionine")
rm(list = ls())
source('~/Desktop/addEntry.R')
check.met()
check.prot()
check.pos()
path
source('~/Dropbox/Investigacion/metosite/MetDB_2019/metdb2021/R_MetOSite_Building_Tools/Quality.R')
getwd()
check.met()
source('~/Dropbox/Investigacion/metosite/MetDB_2019/metdb2021/R_MetOSite_Building_Tools/Quality.R')
check.met()
getwd()
setwd("/Users/juancarlosaledo/Dropbox/Investigacion/metosite/MetDB_2019/metdb2021/R_tables")
load("./Methionine.Rda")
rm(Methionine)
if (exists("path")){
load("path")
data <- Methionine
} else if (exists("Methionine")){
data <- Methionine
} else {
load("./Methionine.Rda")
data <- Methionine
}
rm(Methionine)
source('~/Dropbox/Investigacion/metosite/MetDB_2019/metdb2021/R_MetOSite_Building_Tools/Quality.R')
check.met()
