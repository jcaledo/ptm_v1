find.aaindex("Levit")
lapply(find.aaindex("Levit"), function(x) bio3d::aa.index[[x]]$D)
find.aaindex("Levit")[5]
ptm.plot(up_id = "P04406",
property = 'own',
ptm = 'meto',
window = 5,
index = bio3d::aa.index[[find.aaindex('Levit')[5]]]$I)
ptm.plot(up_id = "P04406",
property = 'own',
ptm = 'meto',
window = 5,
index = bio3d::aa.index[[find.aaindex('Levit')[3]]]$I)
ptm.plot(up_id = "P04406",
property = 'own',
ptm = 'meto',
window = 1,
index = bio3d::aa.index[[find.aaindex('Levit')[3]]]$I)
ptm.plot(up_id = "P04406",
property = 'own',
ptm = 'meto',
window = 5,
index = bio3d::aa.index[[find.aaindex('Levit')[3]]]$I)
ptm.plot(up_id = "P04406",
property = 'own',
ptm = 'meto',
window = 5,
index = bio3d::aa.index[[find.aaindex('Levit')[4]]]$I)
ptm.plot(up_id = "P04406",
property = 'own',
ptm = 'meto',
window = 5,
index = bio3d::aa.index[[find.aaindex('Levit')[2]]]$I)
ptm.plot(up_id = "P04406",
property = 'own',
ptm = 'meto',
window = 5,
index = bio3d::aa.index[[find.aaindex('Levit')[4]]]$I)
rm(list = ls())
ptm.plot(up_id = "P04406", property = 'avg.hyd', ptm = 'meto')
ptm::ptm.plot(up_id = "P04406", property = 'avg.hyd', ptm = 'meto')
devtools::load_all(".")
devtools::load_all(".")
library(ptm)
file.exits("./split_chain")
?file.exits
?exist.file
file_exits("./split_chain")
file_exists("./split_chain")
file.exists("./split_chain")
borrar & file.exists("./split_chain")
borrar <- FALSE
borrar & file.exists("./split_chain")
borrar <- TRUE
borrar & file.exists("./split_chain")
if (borrar & file.exists("./split_chain")){
file.remove("./split_chain")
}
getwd()
?file.remove
if (borrar & file.exists("./split_chain")){
file.remove("./split_chain", recursive = TRUE)
}
?unlink
if (borrar & file.exists("./split_chain")){
unlink("./split_chain", recursive = TRUE)
}
devtools::load_all(".")
ptm.plot('G3SB67', property = 'eiip', window = 10, ptm = 'all')
knitr::opts_chunk$set(echo = TRUE)
library(ptm)
ptm.plot('G3SB67', property = 'eiip', window = 10, ptm = 'all')
a <- ptm.scan('G3SB67')
library(ptm)
?ptm.scan
knitr::opts_chunk$set(echo = TRUE)
library(ptm)
a <- ptm.scan('G3SB67')
ptm.plot('G3SB67', property = 'eiip', window = 10, ptm = 'all')
suppressWarnings(ptm.plot('G3SB67', property = 'eiip', window = 10, ptm = 'all'))
rm(a, borrar)
up_id <- 'G3SB67'
pdb = ""
property <- 'eiip'
ptm <- 'all'
dssp = 'compute'
window = 1
sdata = TRUE
aa <- aai$aa
aa <- ptm:::aai$aa
## -- Check if already exists a directory named 'split_chain'
if (file.exists("./split_chain")){
borrar <- FALSE
} else {
borrar <- TRUE
}
## ------------------------------------------------------------------- ##
## ---------------- Is there any PDB for this protein? --------------- ##
## ------------------------------------------------------------------- ##
if (nchar(pdb) == 6){ # ----- the user provide the PDB and chain
t <- strsplit(pdb, split = "\\.")[[1]]
pdb_id <- t[1]
pdb_chain <- t[2]
exists.pdb <- TRUE
} else if (pdb == ""){ # ---- the PDB is selected by the script
pdb <- pdb.select(up_id)
if (pdb[[1]][1] == 'NO PDB FOUND'){
exists.pdb <- FALSE
} else {
exists.pdb <- TRUE
pdb_id <- pdb[[1]][1]
pdb_chain <- pdb[[2]][1]
pdb_coverage <- attributes(pdb)$coverage
}
} else {
stop("Wrong pdb input!")
}
## ------------------------------------------------------------------- ##
## ------------------- Use of cache when possible -------------------- ##
## ------------------------------------------------------------------- ##
file_scan <- paste("./plotptm_cache/scan_", up_id, ".Rda", sep = "")
## ------------------------------------------------------------------- ##
## ---------------- Is there any PDB for this protein? --------------- ##
## ------------------------------------------------------------------- ##
if (nchar(pdb) == 6){ # ----- the user provide the PDB and chain
t <- strsplit(pdb, split = "\\.")[[1]]
pdb_id <- t[1]
pdb_chain <- t[2]
exists.pdb <- TRUE
} else if (pdb == ""){ # ---- the PDB is selected by the script
pdb <- pdb.select(up_id)
if (pdb[[1]][1] == 'NO PDB FOUND'){
exists.pdb <- FALSE
} else {
exists.pdb <- TRUE
pdb_id <- pdb[[1]][1]
pdb_chain <- pdb[[2]][1]
pdb_coverage <- attributes(pdb)$coverage
}
} else {
stop("Wrong pdb input!")
}
pdb <- ''
## ------------------------------------------------------------------- ##
## ---------------- Is there any PDB for this protein? --------------- ##
## ------------------------------------------------------------------- ##
if (nchar(pdb) == 6){ # ----- the user provide the PDB and chain
t <- strsplit(pdb, split = "\\.")[[1]]
pdb_id <- t[1]
pdb_chain <- t[2]
exists.pdb <- TRUE
} else if (pdb == ""){ # ---- the PDB is selected by the script
pdb <- pdb.select(up_id)
if (pdb[[1]][1] == 'NO PDB FOUND'){
exists.pdb <- FALSE
} else {
exists.pdb <- TRUE
pdb_id <- pdb[[1]][1]
pdb_chain <- pdb[[2]][1]
pdb_coverage <- attributes(pdb)$coverage
}
} else {
stop("Wrong pdb input!")
}
## ------------------------------------------------------------------- ##
## ------------------- Use of cache when possible -------------------- ##
## ------------------------------------------------------------------- ##
file_scan <- paste("./plotptm_cache/scan_", up_id, ".Rda", sep = "")
if (file.exists(file_scan)){
load(file_scan)
}
if (exists.pdb){
file_sse <- paste("./plotptm_cache/sse_", pdb_id, ".Rda", sep = "")
if (file.exists(file_sse)){
load(file_sse)
}
}
## ------------------------------------------------------------------- ##
## ------- Checking that a suitable property has been selected ------- ##
## ------------------------------------------------------------------- ##
pdb_property <- c('sasa', 'acc', 'dpx')
aa_property <- c('volume','mutability', 'helix', 'beta-sheet', 'pi-helix',
'hydropathy', 'avg.hyd', 'hplc', 'argos', 'eiip',
'polarizability')
names(aa_property) <- c('FAUJ880103', 'JOND920102', 'KANM800101', 'KANM800102',
'FODM020101', 'KYTJ820101', 'CIDH920105', 'MEEJ800101',
'ARGP820101', 'VELV850101', 'CHAM820101')
evo_property <- c('entropy7.aa', 'entropy100.aa','entropy7.condon', 'entropy100.codon')
all_property <- c(pdb_property, aa_property, evo_property, 'own')
if (! property %in% all_property){
stop("A proper property must be indicated")
}
if (!exists.pdb & property %in% pdb_property){
stop('This property cannot be computed because no PDB file could be found')
}
if (!is.numeric(window) || window < 1){
stop("'window' must be numeric and positive")
}
if (property == 'own'){
z <- list(...)
if (length(z[[1]]) == 0){
stop("No aa index has been provided")
} else {
index <- z[[1]]
}
if (sum(aa == names(index)) != 20){
stop("The provided aa index must be a named numeric vector")
}
}
## ------------------------------------------------------------------- ##
## ---------- Checking that a suitable ptm has been selected --------- ##
## ------------------------------------------------------------------- ##
supported_ptm <- c('ac', 'me', 'meto', 'p', 'su', 'ub', 'gl', 'sni',
'ni', 'reg', 'dis', 'all')
names(supported_ptm) <- c('green', 'aquamarine', 'red', 'orange', 'deeppink',
'darkgreen', 'purple', 'yellow', 'blue',
'deepskyblue4', 'darkseagreen3', 'black')
should_be_empty <- setdiff(ptm, supported_ptm)
if (length(should_be_empty) != 0){
stop("The supported PTMs are 'ac', 'me', 'meto', 'p', 'su', 'ub', 'gl', 'sni',
'ni', 'reg', 'dis'")
}
if (ptm[1] == 'all'){
ptm <- supported_ptm
}
## ------------------------------------------------------------------- ##
## -------------- Scanning the protein for PTM sites ----------------- ##
## ------------------------------------------------------------------- ##
if (! 'scan' %in% ls()){
scan <- suppressWarnings(ptm.scan(up_id))
if (sdata){
dir.create("plotptm_cache", showWarnings = FALSE)
save(scan, file = paste("./plotptm_cache/scan_", up_id, ".Rda", sep = ""))
}
}
if (! grepl("Sorry", scan)[1]){
ptmScan <- scan[, c(2,3, which(colnames(scan) %in% ptm))]
modifications <- !is.na(ptmScan[,3:dim(ptmScan)[2]])
ptmScan$multi <- apply(as.matrix(modifications), 1, sum)
ptmScan <- ptmScan[which(ptmScan$multi != 0), ]
if (nrow(ptmScan) > 0){
exists.ptm <- TRUE
for (i in 1:nrow(ptmScan)){
if (ptmScan$multi[i] == 1){
ptmScan$col[i] <- names(ptmScan[which(ptmScan[i,-1] == TRUE) + 1][1])
} else {
ptmScan$col[i] <- "black"
}
}
for (i in 1:nrow(ptmScan)){
t <- ptmScan$col[i]
if (t == "black"){
color = "black"
} else {
color <- names(supported_ptm)[which(supported_ptm == t)]
}
ptmScan$col[i] <- color
}
} else { # no PTM sites found
exists.ptm <- FALSE
}
} else {
exists.ptm <- FALSE
}
## ------------------------------------------------------------------- ##
## -------- Computing sse and raw 3d properties when required -------- ##
## ------------------------------------------------------------------- ##
if (exists.pdb){
if (! 'sse' %in% ls()){
sse <- acc.dssp(pdb_id, dssp = dssp)
if (sdata){
dir.create("plotptm_cache", showWarnings = FALSE)
save(sse, file = paste("./plotptm_cache/sse_", pdb_id, ".Rda", sep = ""))
}
}
sse <- sse[which(sse$chain == pdb_chain), ]
seq <- sse$aa # aa sequence
seq <- gsub("[a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r]", "C", seq) # half cystines
names(seq) <- sse$respdb # position of each aa
sse$sse <- NA
for (i in 1:nrow(sse)){
if (sse$ss[i] %in% c('G', 'H', 'I')){
sse$sse[i] <- 1 # helixes arecoded as 1
} else if (sse$ss[i] %in% c('E', 'B')){
sse$sse[i] <- -1 # strands are coded as -1
} else {
sse$sse[i] <- 0 # coils are code as 0
}
}
helices <- sse[which(sse$sse == 1),]
strands <- sse[which(sse$sse == -1),]
coils <- sse[which(sse$sse == 0),]
if (window >= nrow(sse)) {
stop("'window' must be smaller than the sequence length")
}
if (property == 'dpx'){
dpx <- res.dpx(pdb_id)
} else if (property == 'hetatom'){
# -------- TO BE COMPLETED
} else if (property == 'ncontacts'){
# -------- TO BE COMPLETED
}
} else { # When there is no pdb to be used
if (property %in% c('entropy7.aa', 'entropy7.codon', 'entropy100.aa', 'entropy100.codon')){
seq <- get.seq(id.mapping(up_id, 'uniprot', 'kegg'),
db = 'kegg-aa', as.string = FALSE)[[1]] # aa sequence from KEGG
} else {
seq <- get.seq(up_id, as.string = FALSE) # aa sequence from Uniprot
}
names(seq) <- 1:length(seq) # aa position
if (window >= length(aa)){
stop("'window' must be smaller than the sequence length")
}
}
## ------------------------------------------------------------------- ##
## ---------- Computing the property values sequence ----------------- ##
## ------------------------------------------------------------------- ##
if (property == 'own'){
property_seq_mon <- property_seq_com <- index[seq]
} else if (property %in% aa_property){
i <- names(aa_property)[which(aa_property == property)]
property_seq_mon <- property_seq_com <- bio3d::aa.index[[i]]$I[seq]
} else if (property == "sasa"){
property_seq_mon <- sse$sasa_chain
property_seq_com <- sse$sasa_complex
} else if (property == "acc"){
property_seq_mon <- sse$acc_chain
property_seq_com <- sse$acc_complex
} else if (property == "dpx"){
dpx <- res.dpx(pdb_id)[which(dpx$chain == pdb_chain), ]
property_seq_mon <- dpx$min_dpx_chain
property_seq_com <- dpx$min_dpx_complex
} else if (property == "hetatom"){
## ----------------------------------------- TO BE COMPLETED ----------------- ##
} else if (property == "ncontacts"){
## ----------------------------------------- TO BE COMPLETED ----------------- ##
} else if (property == "entropy7.aa"){
t <- shannon(id.mapping(up_id, 'uniprot', 'kegg'), 'vertebrates', base = 21)
property_seq_mon <- property_seq_com <- t$Haa
} else if (property == "entropy7.codon"){
t <- shannon(id.mapping(up_id, 'uniprot', 'kegg'), 'vertebrates', base = 21)
property_seq_mon <- property_seq_com <- t$Hcodon
} else if (property == "entropy100.aa"){
t <- shannon(id.mapping(up_id, 'uniprot', 'kegg'), 'one-hundred', base = 21)
property_seq_mon <- property_seq_com <- t$Haa
} else if (property == "entropy100.codon"){
t <- shannon(id.mapping(up_id, 'uniprot', 'kegg'), 'one-hundred', base = 21)
property_seq_mon <- property_seq_com <- t$Hcodon
}
seq
table(seq)
property %in% aa_property
bio3d::aa.index[[i]]
bio3d::aa.index[[i]]$I
bio3d::aa.index[[i]]$I[seq]
bio3d::aa.index[[i]]$I[c("A", "H", "M")]
seq
t <- get.seq(up_id, as.string = FALSE)
t
library(ptm)
knitr::opts_chunk$set(echo = TRUE)
library(ptm)
ptm.plot('G3SB67', property = 'eiip', window = 10, ptm = 'all')
rm(list = ls())
devtools::load_all(".")
library(ptm)
getwd()
getwd()
setwd("./tests/testthat")
getwd()
a <- compute.dssp(pdb = "./pdb/1U8F.pdb", destfile = "./pdb/")
library(ptm)
pdb = "./pdb/1U8F.pdb"
destfile = "./pdb/"
getwd()
del <- FALSE
if (nchar(pdb) == 4){ # when input is a PDB ID
oldw <- getOption("warn")
options(warn = -1) # avoids unnecessary warnings: 'pdb exists. Skipping download'
mypdb <- bio3d::get.pdb(pdb)
options(warn = oldw) # restores warnings
file <- paste("./", pdb, ".pdb", sep = "")
del <- TRUE
} else {
file <- pdb
}
url_create <- 'https://www3.cmbi.umcn.nl/xssp/api/create/pdb_file/dssp/'
# url_create <- 'http://www.cmbi.umcn.nl/xssp/api/create/pdb_file/dssp/'
body <- list(file_ = httr::upload_file(file))
response_create <- httr::POST(url_create, body = body)
response_create$status_code
job_id <- httr::content(response_create)
job_id
url <- 'http://www.cmbi.umcn.nl/xssp/api/status/pdb_file/dssp/'
url_status <- paste(url, job_id, sep="")
url_status
response_status$status_code
response_status <- httr::GET(url_status)
response_status$status_code
job_status <- httr::content(response_status)
ready <- FALSE
attempts <- 0
!ready & attempts < 3
attempts <- attempts + 1
job_status == 'SUCCESS'
ready = TRUE
t <- strsplit(file, split = "\\/")[[1]] # name and location of the saved file
# pdb_id <- substring(t[length(t)], 1,4)
pdb_id <- strsplit(t[length(t)], split = "\\.")[[1]][1]
destfile = paste(destfile, pdb_id, ".dssp", sep = "")
url <- 'http://www.cmbi.umcn.nl/xssp/api/result/pdb_file/dssp/'
url_results <- paste(url, job_id, sep="")
url_results
response_results <- httr::GET(url_results)
response_results$status_code == 200
a <- httr::content(response_results)
cat(a$result, file = destfile)
return(paste("Work done!. See file at: ", destfile, sep = ""))
rm(list=ls())
compute.dssp(pdb = "./pdb/1U8F.pdb", destfile = "./pdb/")
devtools::load_all("~/ptm_outdropbox/ptm/Rptm")
devtools::load_all("~/ptm_outdropbox/ptm/Rptm")
compute.dssp(pdb = "./pdb/1U8F.pdb", destfile = "./pdb/")
devtools::load_all("~/ptm_outdropbox/ptm/Rptm")
compute.dssp(pdb = "./pdb/1U8F.pdb", destfile = "./pdb/")
devtools::load_all("~/ptm_outdropbox/ptm/Rptm")
compute.dssp(pdb = "./pdb/1U8F.pdb", destfile = "./pdb/")
compute.dssp(pdb = "./pdb/1U8F.pdb", destfile = "./pdb/")
devtools::load_all("~/ptm_outdropbox/ptm/Rptm")
compute.dssp(pdb = "./pdb/1U8F.pdb", destfile = "./pdb/")
a <- compute.dssp("1u8f")
getwd()
rm(a)
a <- compute.dssp("./pdb/1U8F.pdb")
rm(a)
library(ptm)
load("/Users/juancarlosaledo/Dropbox/Investigacion/Working_Ideas/Adaptive_Mistranslation/AM_lysine_cleaned.Rda")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
load("/Users/JCA/Dropbox/Investigacion/Working_Ideas/Adaptive_Mistranslation/AM_lysine.Rda")
getwd()
rm(list=ls())
# load("/Users/JCA/Dropbox/Investigacion/Working_Ideas/Adaptive_Mistranslation/AM_lysine.Rda")
load("/Users/juancarlosaledo/Dropbox/Investigacion/Working_Ideas/Adaptive_Mistranslation/AM_lysine.Rda")
total_proteins <- length(unique(K$uniprot))
number_of_K_sites <- nrow(K)
number_of_AAA_codons <- length(K$codon[which(K$codon == 'AAA')])
number_of_AAG_codons <- length(K$codon[which(K$codon == 'AAG')])
View(K)
# load("/Users/JCA/Dropbox/Investigacion/Working_Ideas/Adaptive_Mistranslation/AM_lysine.Rda")
load("/Users/JCA/Dropbox/Investigacion/Working_Ideas/Adaptive_Mistranslation/AM_lysine.Rda")
# load("/Users/JCA/Dropbox/Investigacion/Working_Ideas/Adaptive_Mistranslation/AM_lysine.Rda")
load("/Users/juancarlosaledo/Dropbox/Investigacion/Working_Ideas/Adaptive_Mistranslation/AM_lysine.Rda")
rm(list=ls())
library(ptm)
# load("/Users/JCA/Dropbox/Investigacion/Working_Ideas/Adaptive_Mistranslation/AM_lysine.Rda")
load("/Users/juancarlosaledo/Dropbox/Investigacion/Working_Ideas/Adaptive_Mistranslation/AM_lysine.Rda")
env_AAA <- K$env[which(K$codon == 'AAA')]
env_AAG <- K$env[which(K$codon == 'AAG')]
m_AAA <- env.matrices(env_AAA)
m_AAG <- env.matrices(env_AAG)
AAA_AAG <- env.Ztest(m_AAA[[2]], m_AAG[[2]], alpha = 0.005)
Z <- AAA_AAG[[1]]
over <- AAA_AAG[[2]]
under <- AAA_AAG[[3]]
head(under)
env.plot(Z, 'K', 0.005, 'AAA vs AAG')
head(over)
head(under)
env.plot(Z, 'K', 0.005, 'AAA vs AAG')
View(K)
View(K)
View(over)
View(under)
View(over)
rm(list=ls())
# load("/Users/JCA/Dropbox/Investigacion/Working_Ideas/Adaptive_Mistranslation/AM_lysine.Rda")
load("/Users/juancarlosaledo/Dropbox/Investigacion/Working_Ideas/Adaptive_Mistranslation/AM_lysine.Rda")
total_proteins <- length(unique(K$uniprot))
number_of_K_sites <- nrow(K)
number_of_AAA_codons <- length(K$codon[which(K$codon == 'AAA')])
number_of_AAG_codons <- length(K$codon[which(K$codon == 'AAG')])
knitr::opts_chunk$set(echo = TRUE)
library(ptm)
rm(list = ls())
load("/Users/juancarlosaledo/Dropbox/Investigacion/Proteomes/human_proteome.Rda")
View(h)
load("/Users/juancarlosaledo/Dropbox/Investigacion/Working_Ideas/Adaptive_Mistranslation/AM_dataset.Rda")
View(df)
View(df)
rm(df)
load("/Users/juancarlosaledo/Dropbox/Investigacion/Working_Ideas/Adaptive_Mistranslation/AM_lysine_.Rda")
View(lys)
rm(lys)
View(h)
h <- h[, c(1:3, 5:6)]
View(h)
?prot2codon
t <- h$prot_id[1]
t <- h$prot_id[1]
seq <- get.seq(t)
tt <- prot2codon(t)
View(tt)
which(tt$codon == "AAA")
which(tt$codon == "AAG")
load("/Users/juancarlosaledo/Dropbox/Investigacion/Working_Ideas/Adaptive_Mistranslation/AM_lysine_cleaned.Rda")
View(data)
View(h)
View(data)
View(h)
K <- h
K <- h[1, ]
