vertices.df <- data
id <- vertices.df[,1]
} else if (is.character(data)){
format <- strsplit(data, split = "\\.")[[1]]
format <- format[length(format)]
format_ <- tolower(format)
if (! format_ %in% c('txt', 'rda')){
stop("Please, make sure that data are in either 'txt' or 'rda' format")
}
}
if (format_ == 'txt'){ # ----- Vertices are provided as txt file
con <- file(data, 'r')
id <- readLines(con)
close(con)
vertices.df <- data.frame(vertex = id)
} else if (format_ == 'rda'){ # ----- Vertices are provided as rda file
load(data)
vertices.df <- get(ls()[! ls() %in% c('format', 'format_',
'data', 'silent', 'threshold')])
id <- vertex.df[,1]
}
ls()
load("/Users/JCA/ptm_outdropbox/ptm/Rptm/tests/testthat/go/sample_vv.Rda")
View(vv)
vertices.df <- get(ls()[! ls() %in% c('format', 'format_',
'data', 'silent', 'threshold')])
View(vertices.df)
View(vv)
View(vertices.df)
View(vv)
ls()
rm(vertices.df, vv)
is.verctor(data)
is.vector(data)
is.data.frame(data)
rm(format, format_)
t <- net.go(data = data)
d <- "paso al fichero"
get(ls()[! ls() %in% c('format', 'format_',
'data', 'silent', 'threshold')])
vertices.df <- get(ls()[! ls() %in% c('format', 'format_',
'data', 'silent', 'threshold')])
rm(d, vertices.df)
d <- "paso al fichero"
v <- get(ls()[! ls() %in% c('format', 'format_',
'data', 'silent', 'threshold')])
w <- get(ls()[! ls() %in% c('format', 'format_',
'data', 'silent', 'threshold')])
str(w)
str(data)
get(ls()[length(ls()) > 1])
str(ls())
rm(list = ls())
data <- '/Users/JCA/ptm_outdropbox/ptm/Rptm/tests/testthat/go/id_set.Rda'
ls()
## ------- Assessing whether data are in txt or rda format -------- ##
format <- format_ <- ""
if (is.vector(data)){ # --- Vertices are directely provided as a vector
vertices <- data
# id <- vertices[,1]
} else if (is.character(data)){
format <- strsplit(data, split = "\\.")[[1]]
format <- format[length(format)]
format_ <- tolower(format)
if (! format_ %in% c('txt', 'rda')){
stop("Please, make sure that data are in either 'txt' or 'rda' format")
}
}
rm(vertices)
is.vector(data)
data
is.array(data)
load(data)
is.array(data)
is.vector(data) & length(data) > 1
p <- "/paso/a/la/porra"
vertices.df <- get(ls()[! ls() %in% c('format', 'format_',
'data', 'silent', 'threshold')])
rm(vertices.df)
vertices.df <- get(ls()[! ls() %in% c('format', 'format_', 'silent', 'threshold')])
vertices.df
get(ls()[! ls() %in% c('format', 'format_', 'silent', 'threshold')])
ls()
get(ls()[! ls() %in% c('format', 'format_', 'silent', 'threshold')])
ls()[! ls() %in% c('format', 'format_', 'silent', 'threshold')]
a <- "vayavayaaquinohayplaya"
ls()
ls()[! ls() %in% c('format', 'format_', 'silent', 'threshold')])
ls()[! ls() %in% c('format', 'format_', 'silent', 'threshold')]
get(ls()[! ls() %in% c('format', 'format_', 'silent', 'threshold')])
get(ls()[! ls() %in% c('format', 'format_', 'silent', 'threshold') & length(ls()) > 1])
ls()[! ls() %in% c('format', 'format_', 'silent', 'threshold') & length(ls()) > 1]
ls()[! ls() %in% c('format', 'format_', 'silent', 'threshold')]
class(ls())
ls()[! ls() %in% c('format', 'format_', 'silent', 'threshold')]
rm(a)
data <- '/Users/JCA/ptm_outdropbox/ptm/Rptm/tests/testthat/go/id_set.Rda'
load(data)
w <- data
data <- '/Users/JCA/ptm_outdropbox/ptm/Rptm/tests/testthat/go/id_set.Rda'
ls()[! ls() %in% c('format', 'format_', 'silent', 'threshold')]
rm(p, vertices.df)
ls()[! ls() %in% c('format', 'format_', 'silent', 'threshold')]
l <- ls()[! ls() %in% c('format', 'format_', 'silent', 'threshold')]
l
"data" %in% l
t <- l[which(l != "data")]
get(t)
rm(list = ls())
load("/Users/JCA/ptm_outdropbox/ptm/Rptm/tests/testthat/go/id_set.Rda")
## ------- Assessing whether data are in txt or rda format -------- ##
format <- format_ <- ""
if (is.vector(data) & length(data) > 1){ # --- Vertices are directely provided as a vector
vertices <- data
# id <- vertices[,1]
} else if (is.character(data)){
format <- strsplit(data, split = "\\.")[[1]]
format <- format[length(format)]
format_ <- tolower(format)
if (! format_ %in% c('txt', 'rda')){
stop("Please, make sure that data are in either 'txt' or 'rda' format")
}
}
if (format_ == 'txt'){ # ----- Vertices are provided as txt file
con <- file(data, 'r')
vertices <- readLines(con)
close(con)
# vertices.df <- data.frame(vertex = id)
} else if (format_ == 'rda'){ # ----- Vertices are provided as rda file
load(data)
l <- ls()[! ls() %in% c('format', 'format_', 'silent', 'threshold')]
if (length(l) > 1){
vertices <- get(l[which(l != "data")])
} else {
vertices <- get(l)
}
}
id <- vertices
## ----------------- Computing f(id) = GO_subset ------------------ ##
fid <- lapply(id, function(x) get.go(id = x, filter = FALSE, format = "string"))
## ---------- Computing Jaccard index in the id x id set ---------- ##
jaccard <- matrix(rep(NA, length(id)^2), ncol =length(id))
colnames(jaccard) <- rownames(jaccard) <- id
for (i in 1:(length(id) - 1)){
if (!silent){
print(paste(i, "  .....  ", id[i], sep = ""))
}
for (j in (i+1):length(id)){
A <- unique(lapply(strsplit(fid[[i]], split = ","), function(x) trimws(x))[[1]])
B <- unique(lapply(strsplit(fid[[j]], split = ","), function(x) trimws(x))[[1]])
AuB <- length(union(A,B))
AB <- length(intersect(A,B))
jaccard[i,j] <- round(AB/AuB, 3)
}
}
## -------------------- From Jaccard to Adjacency ------------------ ##
A <- as.matrix(jaccard)
A[A >= threshold] <- 1
A[A < threshold] <- 0
diag(A) <- 0
A[is.na(A)] <- 0
A <- A + t(A)
rm(list = ls())
load("/Users/JCA/ptm_outdropbox/ptm/Rptm/tests/testthat/go/id_set.Rda")
## ------- Assessing whether data are in txt or rda format -------- ##
format <- format_ <- ""
if (is.vector(data) & length(data) > 1){ # --- Vertices are directely provided as a vector
vertices <- data
# id <- vertices[,1]
} else if (is.character(data)){
format <- strsplit(data, split = "\\.")[[1]]
format <- format[length(format)]
format_ <- tolower(format)
if (! format_ %in% c('txt', 'rda')){
stop("Please, make sure that data are in either 'txt' or 'rda' format")
}
}
if (format_ == 'txt'){ # ----- Vertices are provided as txt file
con <- file(data, 'r')
vertices <- readLines(con)
close(con)
# vertices.df <- data.frame(vertex = id)
} else if (format_ == 'rda'){ # ----- Vertices are provided as rda file
load(data)
l <- ls()[! ls() %in% c('format', 'format_', 'silent', 'threshold')]
if (length(l) > 1){
vertices <- get(l[which(l != "data")])
} else {
vertices <- get(l)
}
}
id <- vertices
## ----------------- Computing f(id) = GO_subset ------------------ ##
fid <- lapply(id, function(x) get.go(id = x, filter = FALSE, format = "string"))
rm(list = ls())
data <- '/Users/JCA/ptm_outdropbox/ptm/Rptm/tests/testthat/go/id_set.Rda'
## ------- Assessing whether data are in txt or rda format -------- ##
format <- format_ <- ""
is.vector(data) & length(data) > 1
if (is.vector(data) & length(data) > 1){ # --- Vertices are directely provided as a vector
vertices <- data
# id <- vertices[,1]
} else if (is.character(data)){
format <- strsplit(data, split = "\\.")[[1]]
format <- format[length(format)]
format_ <- tolower(format)
if (! format_ %in% c('txt', 'rda')){
stop("Please, make sure that data are in either 'txt' or 'rda' format")
}
}
if (format_ == 'txt'){ # ----- Vertices are provided as txt file
con <- file(data, 'r')
vertices <- readLines(con)
close(con)
# vertices.df <- data.frame(vertex = id)
} else if (format_ == 'rda'){ # ----- Vertices are provided as rda file
load(data)
l <- ls()[! ls() %in% c('format', 'format_', 'silent', 'threshold')]
if (length(l) > 1){
vertices <- get(l[which(l != "data")])
} else {
vertices <- get(l)
}
}
id <- vertices
## ----------------- Computing f(id) = GO_subset ------------------ ##
fid <- lapply(id, function(x) get.go(id = x, filter = FALSE, format = "string"))
rm(list = ls())
data <- '/Users/JCA/ptm_outdropbox/ptm/Rptm/tests/testthat/go/id_set.txt'
## ------- Assessing whether data are in txt or rda format -------- ##
format <- format_ <- ""
if (is.vector(data) & length(data) > 1){ # --- Vertices are directely provided as a vector
vertices <- data
# id <- vertices[,1]
} else if (is.character(data)){
format <- strsplit(data, split = "\\.")[[1]]
format <- format[length(format)]
format_ <- tolower(format)
if (! format_ %in% c('txt', 'rda')){
stop("Please, make sure that data are in either 'txt' or 'rda' format")
}
}
if (format_ == 'txt'){ # ----- Vertices are provided as txt file
con <- file(data, 'r')
vertices <- readLines(con)
close(con)
# vertices.df <- data.frame(vertex = id)
} else if (format_ == 'rda'){ # ----- Vertices are provided as rda file
load(data)
l <- ls()[! ls() %in% c('format', 'format_', 'silent', 'threshold')]
if (length(l) > 1){
vertices <- get(l[which(l != "data")])
} else {
vertices <- get(l)
}
}
id <- vertices
## ----------------- Computing f(id) = GO_subset ------------------ ##
fid <- lapply(id, function(x) get.go(id = x, filter = FALSE, format = "string"))
a <- net.go(data = '/Users/JCA/ptm_outdropbox/ptm/Rptm/tests/testthat/go/id_set.txt')
expect_is(a, 'list')
expect_is(a[[1]], 'matrix')
expect_equal(dim(a[[1]]), c(51,51))
expect_equal(dim(a[[1]]), c(6,6))
expect_true(!isSymmetric(a[[1]]))
expect_is(a[[2]], 'matrix')
expect_equal(dim(a[[2]]), c(6,6))
expect_true(isSymmetric(a[[2]]))
expect_is(a[[3]], 'data.frame')
expect_is(a[[3]], 'vector')
expect_is(a[[3]], 'character')
a3 <- a[[3]]
a3
expect_equal(nrow(a[[3]]), 6)
expect_equal(length(a[[3]]), 6)
expect_is(a[[4]], 'matrix')
expect_equal(ncol(a[[4]]), 2)
a <- net.go(data = '/Users/JCA/ptm_outdropbox/ptm/Rptm/tests/testthat/go/id_set.Rda')
rm(list = ls())
data <- '/Users/JCA/ptm_outdropbox/ptm/Rptm/tests/testthat/go/id_set.Rda'
## ------- Assessing whether data are in txt or rda format -------- ##
format <- format_ <- ""
if (is.vector(data) & length(data) > 1){ # --- Vertices are directely provided as a vector
vertices <- data
# id <- vertices[,1]
} else if (is.character(data)){
format <- strsplit(data, split = "\\.")[[1]]
format <- format[length(format)]
format_ <- tolower(format)
if (! format_ %in% c('txt', 'rda')){
stop("Please, make sure that data are in either 'txt' or 'rda' format")
}
}
if (format_ == 'txt'){ # ----- Vertices are provided as txt file
con <- file(data, 'r')
vertices <- readLines(con)
close(con)
# vertices.df <- data.frame(vertex = id)
} else if (format_ == 'rda'){ # ----- Vertices are provided as rda file
load(data)
l <- ls()[! ls() %in% c('format', 'format_', 'silent', 'threshold')]
if (length(l) > 1){
vertices <- get(l[which(l != "data")])
} else {
vertices <- get(l)
}
}
id <- vertices
## ----------------- Computing f(id) = GO_subset ------------------ ##
fid <- lapply(id, function(x) get.go(id = x, filter = FALSE, format = "string"))
rm(list =ls())
devtools::load_all(".")
b <- net.go(data <- '/Users/JCA/ptm_outdropbox/ptm/Rptm/tests/testthat/go/id_set.Rda', threshold = 0.1)
devtools::load_all(".")
b <- net.go(data <- '/Users/JCA/ptm_outdropbox/ptm/Rptm/tests/testthat/go/id_set.Rda', threshold = 0.1)
devtools::load_all(".")
devtools::load_all(".")
b <- net.go(data <- '/Users/JCA/ptm_outdropbox/ptm/Rptm/tests/testthat/go/id_set.Rda', threshold = 0.1)
expect_is(b, 'list')
expect_is(b[[1]], 'matrix')
expect_equal(dim(b[[1]]), c(150,150))
expect_is(b, 'list')
expect_is(b[[1]], 'matrix')
expect_equal(dim(b[[1]]), c(6,6))
expect_true(!isSymmetric(b[[1]]))
expect_is(b[[2]], 'matrix')
expect_equal(dim(b[[2]]), c(6,6))
expect_true(isSymmetric(b[[2]]))
expect_is(b[[3]], 'character')
expect_equal(nrow(b[[3]]), 6)
expect_equal(length(b[[3]]), 6)
expect_is(b[[4]], 'matrix')
expect_equal(ncol(b[[4]]), 2)
rm(db, data)
rm(b)
target <- '/Users/JCA/ptm_outdropbox/ptm/Rptm/tests/testthat/go/GOvivo.txt'
## ------------------------------- Check arguments --------------------------------- ##
warn <- FALSE
warn_message <- c()
file.exists(target)
warn_message <- c()
if (! file.exists(target)){
stop("Please, provide a proper target file")
} else {
target <- httr::upload_file(target)
}
mode <- 'mhg'
if (mode == 'mhg'){
background = NULL
} else if (mode == 'hg'){
if (! file.exists(background)){
stop("Please, provide a proper background file")
} else {
background <- httr::upload_file(background)
}
} else {
mode <- 'mhg'
warn <- TRUE
warn_message <- c(warn_message, "Run mode has been set to 'mgh'")
}
db <- 'proc'
if (! db %in% c('proc', 'func', 'comp', 'all')){
db <- 'all'
warn <- TRUE
warn_message <- c(warn_message, "db has been set to 'all")
}
organism <- c('Arabidopsis thaliana', 'Caenorhabditis elegans', 'Danio rerio',
'Drosophila melanogaster', 'Homo sapiens', 'Mus musculus',
'Rattus norvegicus', 'Saccharomyces cerevisiae')
species = 'Homo sapiens'
if (species %in% organism){
sp <- gsub(' ', '_', toupper(species))
} else {
sp <- "HOMO_SAPIENS"
warn <- TRUE
warn_message <- c(warn_message, "species has been set to 'HOMO_SAPIENS")
}
pvalue = 0.001
if (is.numeric(pvalue)){
closest <- c()
for (n in (3:11)){
closest <- c(closest, abs(pvalue - (1/10^n)))
}
closest <- which(closest == min(closest)) + 2
p <- 1/10^closest
p <- as.character(p)
} else {
stop("A proper numeric p-Value should be provided")
}
## --------------------------------- Form ----------------------------------- ##
query_parameters <- list(
application = "gorilla",
run_mode = mode,
target_file_name = target,
background_file_name = background,
db = db,
pvalue_thresh = p,
fast_mode = NA,
output_excel = NA,
output_revigo = NA,
output_unresolved = NA,
species = sp
)
resp_gorilla <- httr::POST(url = "http://cbl-gorilla.cs.technion.ac.il/servlet/GOrilla",
body = query_parameters)
if (httr::status_code(resp_gorilla) > 300){
stop(paste("The server responded: ", httr::status_code(resp_gorilla)))
}
## -------------------------------------- Results ---------------------------------------- ##
response <- httr::GET(resp_gorilla$url)
httr::status_code(response)
if (httr::status_code(response) >= 200 & httr::status_code(response) < 300){
work_id <- strsplit(resp_gorilla$url, split = "id=")[[1]][2]
base_res_url <- "http://cbl-gorilla.cs.technion.ac.il/GOrilla/"
if (db == 'proc'){
process_url <- paste(base_res_url, work_id, "/GO.xls", sep = "")
process_df <- read.delim(process_url)
output <-  process_df
} else if (db == 'func'){
function_url <- paste(base_res_url, work_id, "/GO.xls", sep = "")
function_df <- read.delim(function_url)
output <-  function_df
} else if (db == 'comp'){
component_url <- paste(base_res_url, work_id, "/GO.xls", sep = "")
component_df <- read.delim(component_url)
output <-  component_df
} else {
process_url <- paste(base_res_url, work_id, "/GOPROCESS.xls", sep = "")
function_url <- paste(base_res_url, work_id, "/GOFUNCTION.xls", sep = "")
component_url <- paste(base_res_url, work_id, "/GOCOMPONENT.xls", sep = "")
response_results <- httr::GET(process_url)
wait <- TRUE
times <- 0
while (wait & times < 7){
if (httr::status_code(response_results) == 200){
wait <- FALSE
}
times <- times + 1
Sys.sleep(10)
}
process_df <- read.delim(process_url)
function_df <- read.delim(function_url)
component_df <- read.delim(component_url)
# Sys.sleep(60)
output <- list(process_df, function_df, component_df)
}
attr(output, 'target') <- target
attr(output, 'background') <- background
attr(output, 'run mode') <- mode
attr(output, 'db') <- db
attr(output, 'pValue') <- p
if (warn){
warning(warn_message)
}
} else {
output <- httr::status_code(response)
}
View(output)
rm(list = ls())
?meto.search
group1 <- meto.search(highthroughput.group = FALSE,
bodyguard.group = TRUE,
regulatory.group = FALSE)
View(group1)
getwd()
save(group1, "./group1.Rda")
save(group1, file = "./group1.Rda")
library("xlsx")
install.packages("xlsx")
# install.packages("xlsx")
library(xlsx)
write.xlsx(group1,
file = "./group1",
sheetName = "Sheet1",
col.names = TRUE, row.names = TRUE, append = FALSE)
# install.packages("xlsx")
library(xlsx)
write.xlsx2(group1,
file = "./group1",
sheetName = "Sheet1",
col.names = TRUE, row.names = TRUE, append = FALSE)
group2 <- meto.search(highthroughput.group = FALSE,
bodyguard.group = FALSE,
regulatory.group = TRUE)
View(group2)
View(group2)
save(group2, file = "./group2.Rda")
write.xlsx(group1,
file = "./group1",
sheetName = "Sheet1",
col.names = TRUE, row.names = TRUE, append = FALSE)
# install.packages("xlsx")
library(xlsx)
write.xlsx(group1,
file = "./group1",
sheetName = "Sheet1",
col.names = TRUE, row.names = TRUE, append = FALSE)
?write.xlsx
write.xlsx(group1,
file = "./group1.xlsx",
sheetName = "Sheet1",
col.names = TRUE, row.names = TRUE, append = FALSE)
write.xlsx(group2,
file = "./group2.xlsx",
sheetName = "Sheet1",
col.names = TRUE, row.names = TRUE, append = FALSE)
getwd()
load("/Users/JCA/ptm_outdropbox/ptm/Rptm/group1.Rda")
rm(list = ls())
load("/Users/JCA/ptm_outdropbox/ptm/Rptm/group1.Rda")
View(group1)
load("/Users/JCA/ptm_outdropbox/ptm/Rptm/group2.Rda")
