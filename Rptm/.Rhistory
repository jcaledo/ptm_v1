s <- ('a', 2, 'bc')
s <- c('a', 2, 'bc')
s
is.array(s)
is.character(s)
length(s)
"/es/unpaht/to" -> p
length(p)
is.data.frame(sample)
"o" %in% "hola"
gregexpr("o", "hola")[[1]]
rm(list = ls())
target <- '/Users/JCA/ptm_outdropbox/ptm/htdocs/Rmd/go/GOvivo.txt'
background <- '/Users/JCA/ptm_outdropbox/ptm/htdocs/Rmd/go/GObackground.txt'
is.character(target)
length(target) == 1
## ----- The sample to be analyzed
if (is.character(target) & length(target) == 1){ # path to the sample txt
if (gregexpr('txt', target)[[1]] != -1){
sample <- read.csv(target, header = FALSE)
sample <- as.character(sample$V1)
} else {
stop("A proper path to a txt file should be provided for the target set")
}
} else if (is.character(target) & length(target) > 1){
sample <- as.character(target)
} else if (is.data.frame(target) & nrow(target) > 1){
sample <- as.character(target)
} else {
stop("A proper target set must be provided")
}
## ----- The background set
if (is.character(background) & length(background) == 1){ # path to the background txt
if (gregexpr('txt', background)[[1]] != -1){
bg <- read.csv(background, header = FALSE)
bg <- as.character(bg$V1)
} else {
stop("A proper path to a txt file should be provided for the background set")
}
} else if (is.character(background) & length(background) > 1){
bg <- as.character(background)
} else if (is.data.frame(background) & nrow(background) > 1){
bg <- as.character(background)
} else {
stop("A proper background set must be provided")
}
## ----- Check that the target is included into the background set
intersect(sample, bg) == sample
intersect(sample, bg)
## ----- Check that the target is included into the background set
sample_bg <- intersect(sample, bg)
str(sample)
str(bg)
sample %in% bg
?intersect
is.vector(1:10)
is.vector(c('a', 'b'))
is.vector(1)
## ----- Check that the target is included into the background set
sample_bg <- intersect(sample, bg)
sample_bg
setdiff(bg, sample) -> d
sample[1]
sample[1] %in% bg
"P01009" %in% sample
"P01009 " %in% sample
sample[1]
bg[1]
?trimsw
?trimws
knitr::opts_chunk$set(echo = TRUE)
library(ptm)
library(knitr)
all <- meto.search(organism = 'Homo sapiens',
oxidant = 'hydrogen peroxide')
vivo <- unique(all$prot_id[which(all$met_vivo_vitro == 'vivo')])
bg <- unique(all$prot_id)
target <- vivo
background <- bg
is.character(target) & length(target) == 1
is.character(target) & length(target) > 1
## ----- The sample to be analyzed
if (is.character(target) & length(target) == 1){ # input as path to the txt
if (gregexpr('txt', target)[[1]] != -1){
sample <- read.csv(target, header = FALSE)
sample <- trimws(as.character(sample$V1))
} else {
stop("A proper path to a txt file should be provided for the target set")
}
} else if (is.character(target) & length(target) > 1){ # input as vector
sample <- trimws(as.character(target))
} else if (is.data.frame(target) & nrow(target) > 1){ # input as dataframe
sample <- trimws(as.character(target))
} else {
stop("A proper target set must be provided")
}
## ----- The background set
if (is.character(background) & length(background) == 1){ # input as path to the txt
if (gregexpr('txt', background)[[1]] != -1){
bg <- read.csv(background, header = FALSE)
bg <- trimws(as.character(bg$V1))
} else {
stop("A proper path to a txt file should be provided for the background set")
}
} else if (is.character(background) & length(background) > 1){ # input as vector
bg <- as.character(background)
} else if (is.data.frame(background) & nrow(background) > 1){ # input as dataframe
bg <- trimws(as.character(background))
} else {
stop("A proper background set must be provided")
}
## ----- Check that the target is included into the background set
sample_bg <- intersect(sample, bg)
sample_bg == sample
sum(sample_bg == sample)
## ----- Check that the target is included into the background set
sample_bg <- intersect(sample, bg)
load("/Users/JCA/ptm_outdropbox/ptm/Rptm/bg.Rda")
View(bg)
View(bg)
?metosite.search
?meto.search
library(ptm)
?meto.search
View(bg)
ids <- bg$up_id[1:10]
rm(bg)
## ----- The background set
if (is.character(ids) & length(ids) == 1){ # input as path to the txt
if (gregexpr('txt', ids)[[1]] != -1){
bg <- read.csv(ids, header = FALSE)
bg <- trimws(as.character(bg$V1))
} else {
stop("A proper path to a txt file should be provided for the background set")
}
} else if (is.character(ids) & length(ids) > 1){ # input as vector
bg <- as.character(ids)
} else if (is.data.frame(ids) & nrow(ids) > 1){ # input as dataframe
bg <- trimws(as.character(ids))
} else {
stop("A proper background set must be provided")
}
rm(bg)
## ----- The background set
if (is.character(ids) & length(ids) == 1){ # input as path to the txt
if (gregexpr('txt', ids)[[1]] != -1){
bg <- read.csv(ids, header = FALSE)
bg <- trimws(as.character(bg$V1))
} else {
stop("A proper path to a txt file should be provided for the background set")
}
} else if (is.character(ids) & length(ids) > 1){ # input as vector
bg <- as.character(ids)
} else if (is.data.frame(ids) & nrow(ids) > 1){ # input as dataframe
bg <- trimws(as.character(ids))
} else {
stop("A proper background set must be provided")
}
## ----- Getting GO ids for the backgraund set
bg <- data.frame(up_id = bg, GO_id = rep(NA, length(bg)))
for (i in 1:nrow(bg)){
bg$GO_id[i] <- get.go(trimws(bg$up_id[i]), format = 'string')
}
View(bg)
View(bg)
bg$up_id[1:3]
ncol(bg)
library(ptm)
target <- bg
View(target)
target <- bg$up_id
rm(bg)
rm(i,ids)
a <- go.enrich(target, background = "/Users/JCA/ptm_outdropbox/ptm/Rptm/bg.Rda")
is.character(target)
is.character(target) & length(target) > 1
length(target) > 1
is.character(target)
target <- as.character(target)
is.character(target) & length(target) > 1
a <- go.enrich(target, background = "/Users/JCA/ptm_outdropbox/ptm/Rptm/bg.Rda")
## ----- Check the input background set
if (is.character(target) & length(target) == 1){
load(background)
}
background <- "/Users/JCA/ptm_outdropbox/ptm/Rptm/bg.Rda"
load(background)
tt <- load(background)
tt
rm(bg,tt,background)
load("/Users/JCA/ptm_outdropbox/ptm/Rptm/bg.Rda")
a <- go.enrich(target, background = bg)
library(ptm)
a <- go.enrich(target, background = bg)
## ----- Check that the target is included into the background set
sample_bg <- intersect(sample, bg)
## ----- The target sample to be analyzed
if (is.character(target) & length(target) == 1){ # input as path to the txt
if (gregexpr('txt', target)[[1]] != -1){
sample <- read.csv(target, header = FALSE)
sample <- trimws(as.character(sample$V1))
} else {
stop("A proper path to a txt file should be provided for the target set")
}
} else if (is.character(target) & length(target) > 1){ # input as vector
sample <- trimws(as.character(target))
} else if (is.data.frame(target) & nrow(target) > 1){ # input as dataframe
sample <- trimws(as.character(target))
} else {
stop("A proper target set must be provided")
}
## ----- Check that the target is included into the background set
sample_bg <- intersect(sample, bg)
if (length(sample) != sum(sample_bg == sample)){
stop("Please, make sure that all the target proteins are contained in the background set")
}
sample
bg
View(bg)
str(bg)
str(bg$up_id)
a <- go.enrich(target, background = bg)
?annFUN.gene2GO
library(ptm)
a <- go.enrich(target, background = bg)
library(ptm)
a <- go.enrich(target, background = bg)
library(topGO)
a <- go.enrich(target, background = bg)
View(a)
?new
devtools::load_all(".")
knitr::opts_chunk$set(echo = TRUE)
library(ptm)
library(knitr)
all <- meto.search(organism = 'Homo sapiens',
oxidant = 'hydrogen peroxide')
all <- meto.search(organism = 'Homo sapiens',
oxidant = 'hydrogen peroxide')
knitr::opts_chunk$set(echo = TRUE)
library(ptm)
library(knitr)
all <- meto.search(organism = 'Homo sapiens',
oxidant = 'hydrogen peroxide')
all <- meto.search(organism = 'Homo sapiens',
oxidant = 'hydrogen peroxide')
vivo <- unique(all$prot_id[which(all$met_vivo_vitro == 'vivo')])
load("/Users/JCA/ptm_outdropbox/bg.Rda")
a <- go.enrich(target = vivo, background = bg)
library(ptm)
a <- go.enrich(target = vivo, background = bg)
?annFUN.gene2GO
topGO::new
?topGO::new
?new
?annFUN
a <- go.enrich(target = vivo, background = bg)
library(topGO)
a <- go.enrich(target = vivo, background = bg)
?new
?gene2GO
ptm::gene2GO
topGO::gene2GO
## ------- Create topGO object
GOdata <- new("topGOdata", ontology = aspect, allGenes = compared_proteins,
annot = annFUN.gene2GO, gene2GO = bg2GO)
aspect <- 'BP'
## ------- Create topGO object
GOdata <- new("topGOdata", ontology = aspect, allGenes = compared_proteins,
annot = annFUN.gene2GO, gene2GO = bg2GO)
?annFUN
library(ptm)
a <- go.enrich(target = vivo, background = bg)
View(a)
library(ptm)
View(a)
knitr::opts_chunk$set(echo = TRUE)
library(ptm)
library(knitr)
os <- searcho.go('oxidative stress')
os <- search.go('oxidative stress')
View(os)
os <- os$GO_id
os
os <- search.go('oxidative stress')
View(os)
os$GO_id[1]
os$GO_id[[1]]
t <- os$GO_id[[]]
t <- unlist(os$GO_id)
rm(a, os, aspect, t)
target <- vivo
background <- bg
query <- 'oxidative stress'
## ----- The target sample to be analyzed
if (is.character(target) & length(target) == 1){ # input as path to the txt
if (gregexpr('txt', target)[[1]] != -1){
sample <- read.csv(target, header = FALSE)
sample <- trimws(as.character(sample$V1))
} else {
stop("A proper path to a txt file should be provided for the target set")
}
} else if (is.character(target) & length(target) > 1){ # input as vector
sample <- trimws(as.character(target))
} else if (is.data.frame(target) & nrow(target) > 1){ # input as dataframe
sample <- trimws(as.character(target))
} else {
stop("A proper target set must be provided")
}
## ----- Check the input background set
if (is.data.frame(background) & ncol(background) == 2){
bg <- trimws(as.character(background[,1]))
} else {
stop("A proper background set must be provided")
}
## ----- Check that the target is included into the background set
sample_bg <- intersect(sample, bg)
if (length(sample) != sum(sample_bg == sample)){
stop("Please, make sure that all the target proteins are contained in the background set")
}
rquery <- search.go(query)
View(rquery)
rquery <- unlist(rquery$GO_id)
t <- search.go("una tonteria")
t <- search.go("una tontada")
t <- search.go("oxidative")
View(t)
t <- search.go("oxidative stress")
t <- search.go("stress")
View(t)
t <- search.go("coche")
rm(list = ls())
query <- 'oxidative stress'
query <- tolower(query)
query_ <- gsub(" ", '%20', query)
baseURL <- "https://www.ebi.ac.uk/QuickGO/services/ontology/go/search?query="
baseURL
requestURL <- paste(baseURL, query_, "&limit=600", sep = "")
requestURL
r <- httr::GET(requestURL, httr::accept("application/json"))
r
httr::stop_for_status(r)
json <- jsonlite::toJSON(httr::content(r))
json
rm(list = ls())
query <- 'tontada'
query <- tolower(query)
query_ <- gsub(" ", '%20', query)
baseURL <- "https://www.ebi.ac.uk/QuickGO/services/ontology/go/search?query="
requestURL <- paste(baseURL, query_, "&limit=600", sep = "")
requestURL
r <- httr::GET(requestURL, httr::accept("application/json"))
r
httr::stop_for_status(r)
json <- jsonlite::toJSON(httr::content(r))
json
output <- as.data.frame(jsonlite::fromJSON(json))[, 2:6]
json
t <- as.data.frame(jsonlite::fromJSON(json))
t <- jsonlite::fromJSON(json)
t
myjson <- jsonlite::fromJSON(json)
myjson
myjson$numberOfHits == 0
library(ptm)
rm(list = ls())
library(ptm)
a <- search.go('oxidative stress')
b <- search.go('tontada')
b
if (a == b){
print('ok')
}
if (a[1] == b){
print('ok')
}
if (a[1,1] == b){
print('ok')
}
if (b[1,1] == b){
print('ok')
}
is.data.frame(a)
b
knitr::opts_chunk$set(echo = TRUE)
library(ptm)
library(knitr)
all <- meto.search(organism = 'Homo sapiens',
oxidant = 'hydrogen peroxide')
vivo <- unique(all$prot_id[which(all$met_vivo_vitro == 'vivo')])
target <- vivo
load("/Users/JCA/ptm_outdropbox/bg.Rda")
rm(all, vivo, b)
## ----- The target sample to be analyzed
if (is.character(target) & length(target) == 1){ # input as path to the txt
if (gregexpr('txt', target)[[1]] != -1){
sample <- read.csv(target, header = FALSE)
sample <- trimws(as.character(sample$V1))
} else {
stop("A proper path to a txt file should be provided for the target set")
}
} else if (is.character(target) & length(target) > 1){ # input as vector
sample <- trimws(as.character(target))
} else if (is.data.frame(target) & nrow(target) > 1){ # input as dataframe
sample <- trimws(as.character(target))
} else {
stop("A proper target set must be provided")
}
## ----- Check the input background set
if (is.data.frame(background) & ncol(background) == 2){
bg <- trimws(as.character(background[,1]))
} else {
stop("A proper background set must be provided")
}
background <- bg
## ----- The target sample to be analyzed
if (is.character(target) & length(target) == 1){ # input as path to the txt
if (gregexpr('txt', target)[[1]] != -1){
sample <- read.csv(target, header = FALSE)
sample <- trimws(as.character(sample$V1))
} else {
stop("A proper path to a txt file should be provided for the target set")
}
} else if (is.character(target) & length(target) > 1){ # input as vector
sample <- trimws(as.character(target))
} else if (is.data.frame(target) & nrow(target) > 1){ # input as dataframe
sample <- trimws(as.character(target))
} else {
stop("A proper target set must be provided")
}
## ----- Check the input background set
if (is.data.frame(background) & ncol(background) == 2){
bg <- trimws(as.character(background[,1]))
} else {
stop("A proper background set must be provided")
}
## ----- Check that the target is included into the background set
sample_bg <- intersect(sample, bg)
if (length(sample) != sum(sample_bg == sample)){
stop("Please, make sure that all the target proteins are contained in the background set")
}
rquery <- a
rm8a
rm(a)
!is.data.frame(rquery)
rquery <- unlist(rquery$GO_id)
target_c <- setdiff(bg, sample)
View(background)
go_target <- background$GO_id[which(background$up_id %in% sample)]
go_target
go_target <- unlist(background$GO_id[which(background$up_id %in% sample)])
go_target
background$GO_id[1]
strsplit(background$GO_id[1], split = ',')
trimws(strsplit(background$GO_id[1], split = ',')[[1]])
go_target <- trimws(strsplit(background$GO_id[which(background$up_id %in% sample)],
split = ',')[[1]])
got_target
go_target
# go_target <- trimws(strsplit(background$GO_id[which(background$up_id %in% sample)], split = ',')[[1]])
go_target <- background$GO_id[which(background$up_id %in% sample)][[1]]
length(go_target)
nchar(go_target)
go_target
# go_target <- trimws(strsplit(background$GO_id[which(background$up_id %in% sample)], split = ',')[[1]])
go_target <- background$GO_id[which(background$up_id %in% sample)]
go_target[1]
go_target[1000]
t <- paste(go_target, collapse = ',')
t
# go_target <- trimws(strsplit(background$GO_id[which(background$up_id %in% sample)], split = ',')[[1]])
go_target <- background$GO_id[which(background$up_id %in% sample)]
go_target <- paste(go_target, collapse = ',')
go_target <- strsplit(go_target, split = ',')
# go_target <- trimws(strsplit(background$GO_id[which(background$up_id %in% sample)], split = ',')[[1]])
go_target <- background$GO_id[which(background$up_id %in% sample)]
go_target <- paste(go_target, collapse = ',')
go_target <- strsplit(go_target, split = ',')[[1]]
length(go_target)
go_target[1]
go_target[1000]
go_target <- trimws(go_target)
go_target[1000]
# -- GO terms from target complement
go_target_c <- background$GO_id[which(background$up_id %in% target_c)]
go_target_c <- paste(go_target_c, collapse = ',')
go_target_c <- strsplit(go_target_c, split = ',')[[1]]
go_target_c <- trimws(go_target_c)
rquery
# -- Contingency Table
# a: number of terms from the query into the target set
# b: number of terms from the query into the target complement set
# c: number of terms from the target which are not present into the query
# d: number of terms from the target complement are not present into the query
a <- intersect(go_target, rquery)
# -- Contingency Table
# a: number of terms from the query into the target set
# b: number of terms from the query into the target complement set
# c: number of terms from the target which are not present into the query
# d: number of terms from the target complement are not present into the query
a <- length(intersect(go_target, rquery))
a <- intersect(c('a', 'b'), 1:10)
length(a)
# -- Contingency Table
# a: number of terms from the query into the target set
# b: number of terms from the query into the target complement set
# c: number of terms from the target which are not present into the query
# d: number of terms from the target complement are not present into the query
a <- length(intersect(go_target, rquery))
b <- length(intersect(go_target_c, rquery))
c <- length(setdiff(go_target, query))
c <- length(setdiff(go_target, rquery))
